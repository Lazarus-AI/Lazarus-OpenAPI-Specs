{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/developer/": {
      "get": {
        "summary": "Get connectivity test",
        "description": "Verify authKey, orgId, and connectivity",
        "operationId": "get_developer_check_developer__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeveloperResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unsuccessful Response",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "parameters": [
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          }
        ]
      }
    },
    "/developer/webhook": {
      "post": {
        "summary": "Post webhook test",
        "description": "Developer test for configuring a webhook to receive model responses",
        "operationId": "post_webhook_check_developer_webhook_post",
        "parameters": [
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCheckRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookTestResponse"
                }
              }
            }
          },
          "500": {
            "description": "Validation Error",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Answer": {
        "properties": {
          "answer": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Answer",
            "description": "Model's answer to the question asked.",
            "models": {
              "RikAI2": {
                "type": "string"
              },
              "RikAI2-Extract": {
                "description": "Model's answer to the question asked. The model fills the JSON structure that was provided for input.",
                "type": "object"
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "The question asked.",
            "models": {
              "RikAI2": {
                "type": "string"
              },
              "RikAI2-Extract": {
                "type": "object"
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          },
          "context": {
            "type": "string",
            "title": "Context",
            "description": "Where in the document the answer was found.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "confidence": {
            "type": "number",
            "title": "Confidence",
            "description": "Answer confidence score ranging from 0 to 1.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "translated": {
            "type": "string",
            "title": "Translated",
            "description": "Translated answer if the `language` field was included in the request",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "translatedContext": {
            "type": "string",
            "title": "Translatedcontext",
            "description": "Translated context if the `language` field was included in the request",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "warning": {
            "type": "string",
            "title": "Warning",
            "description": "Warning about feature or model usage",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              },
              "Riky2": {
                "forceExclude": true
              }
            }
          }
        },
        "type": "object",
        "required": [
          "answer",
          "question"
        ],
        "title": "Answer",
        "description": "Answer model, data for each Q&A in response"
      },
      "AsyncStatusResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Apiversion",
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header.",
            "forceType": "string"
          },
          "endTime": {
            "type": "integer",
            "title": "Endtime",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "title": "Starttime",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          }
        },
        "type": "object",
        "required": [
          "model"
        ],
        "title": "AsyncStatusResponse",
        "description": "/rikai/zip/async/{status_id} response"
      },
      "BulkBase64Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "forceRequire": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Outputurl",
            "description": "URL where resulting [ZIP file](../../outputurl) or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "title": "Outputurlheaders",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {},
            "forceType": "object",
            "setDefault": "None"
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "title": "Sftp",
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "title": "Returnjson",
            "description": "Specifies the format of the response sent to `outputURL`. When set to true, a JSON response is sent to the `outputURL`. Set to false to send a ZIP file instead.",
            "default": true
          },
          "bigFile": {
            "type": "boolean",
            "title": "Bigfile",
            "description": "Allows large file inputs. Automatically sets to `true` when the whole request (Base64 string and prompt) is greater than 1 MB.",
            "forceExclude": true
          },
          "internalQueue": {
            "type": "boolean",
            "title": "Internalqueue",
            "description": "Use internal task queue when set to true.",
            "default": false,
            "forceExclude": true
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Base64",
            "description": "Base64 encoded string for the file from which data will be extracted. If the value is an array of base64 strings, you receive an individual response for each string."
          }
        },
        "type": "object",
        "required": [
          "base64"
        ],
        "title": "BulkBase64Request",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} base64 request"
      },
      "BulkRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BulkBase64Request"
          },
          {
            "$ref": "#/components/schemas/BulkURLRequest"
          }
        ],
        "title": "BulkRequestBody",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} request body"
      },
      "BulkResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Apiversion",
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header.",
            "forceType": "string"
          },
          "endTime": {
            "type": "integer",
            "title": "Endtime",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "title": "Starttime",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "statusId": {
            "type": "object",
            "title": "Statusid",
            "description": "A list of document IDs, each representing an uploaded file. Each ID is a randomly generated UUID. These IDs serve as input for retrieving the status of an asynchronous request via the `/rikai/zip/async/{statusId}` endpoint."
          },
          "failedRequests": {
            "items": {},
            "type": "array",
            "title": "Failedrequests",
            "description": "File requests that failed to queue."
          },
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Status message."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "JSON from the request `metadata` field."
          },
          "warning": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Warning",
            "description": "Warnings such as webhook failure."
          }
        },
        "type": "object",
        "required": [
          "model",
          "statusId",
          "message"
        ],
        "title": "BulkResponse",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} response"
      },
      "BulkURLRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "forceRequire": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Outputurl",
            "description": "URL where resulting [ZIP file](../../outputurl) or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "title": "Outputurlheaders",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {},
            "forceType": "object",
            "setDefault": "None"
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "title": "Sftp",
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "title": "Returnjson",
            "description": "Specifies the format of the response sent to `outputURL`. When set to true, a JSON response is sent to the `outputURL`. Set to false to send a ZIP file instead.",
            "default": true
          },
          "bigFile": {
            "type": "boolean",
            "title": "Bigfile",
            "description": "Allows large file inputs. Automatically sets to `true` when the whole request (Base64 string and prompt) is greater than 1 MB.",
            "forceExclude": true
          },
          "internalQueue": {
            "type": "boolean",
            "title": "Internalqueue",
            "description": "Use internal task queue when set to true.",
            "default": false,
            "forceExclude": true
          },
          "inputURL": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Inputurl",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, HEIC, SVG, TIFF, TIF, TXT, or GIF."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "Forcebase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "inputURL"
        ],
        "title": "BulkURLRequest",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} url request"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InputOutputSFTP": {
        "properties": {
          "inputURL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              }
            ],
            "description": "SFTP server authentication info for the `inputURL`."
          },
          "outputURL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              }
            ],
            "description": "SFTP server authentication info for the `outputURL`."
          }
        },
        "type": "object",
        "title": "InputOutputSFTP",
        "description": "SFTP server info for inputURL and outputURL"
      },
      "RikAIBase64Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "mostUsed": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Base64",
            "description": "Base64 encoded string for the file from which data will be extracted. If the value is an array of base64 strings, each string will be combined into one PDF before getting run through the model."
          },
          "ocr": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Ocr",
            "description": "OCR data for the document (entire response from [OCR endpoint (version: 2)](../../ocr/ocr_v2), [example here](https://lazarus-ai.atlassian.net/wiki/external/YmIwNDNmNWZmNzhhNGYwNDg3MjBlNmFhOTgwMzAwNjc)). If included, we do not run OCR on the document and use these results instead. Only OCR data obtained from the Lazarus OCR endpoint (include version: 2 in the header) is supported as input.",
            "forceType": "object",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          }
        },
        "type": "object",
        "required": [
          "base64"
        ],
        "title": "RikAIBase64Request",
        "description": "/rikai and /rikai/custom/{model_id} base64 request"
      },
      "RikAIChatRequestBody": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false,
            "forceExclude": true
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "mostUsed": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "ocr": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Ocr",
            "description": "OCR data for the document (entire response from [OCR endpoint (version: 2)](../../ocr/ocr_v2), [example here](https://lazarus-ai.atlassian.net/wiki/external/YmIwNDNmNWZmNzhhNGYwNDg3MjBlNmFhOTgwMzAwNjc)). If included, we do not run OCR on the document and use these results instead. Only OCR data obtained from the Lazarus OCR endpoint (include version: 2 in the header) is supported as input.",
            "forceExclude": true
          },
          "base64": {
            "type": "string",
            "title": "Base64",
            "description": "Base64 encoded string for the file from which data will be extracted. If the value is an array of base64 strings, each string will be combined into one PDF before getting run through the model.",
            "forceExclude": true
          }
        },
        "type": "object",
        "title": "RikAIChatRequestBody",
        "description": "/rikai/chat and /rikai/chat/{model_id} request body\nDoes not serve Rikai2-Extract requests"
      },
      "RikAIFileRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "mostUsed": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "file",
            "description": "File to upload: Must be a PDF, JPEG, JPG, PNG, SVG, HEIC, TIFF, TIF, TXT or GIF."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "Forcebase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "RikAIFileRequest",
        "description": "/rikai and /rikai/custom/{model_id} file request"
      },
      "RikAIOCRRequestBody": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "mostUsed": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false,
            "forceExclude": true
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "ocr": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Ocr",
            "description": "OCR data for the document (entire response from [OCR endpoint (version: 2)](../../ocr/ocr_v2), [example here](https://lazarus-ai.atlassian.net/wiki/external/YmIwNDNmNWZmNzhhNGYwNDg3MjBlNmFhOTgwMzAwNjc)). Only OCR data obtained from the Lazarus OCR endpoint (include version: 2 in the header) is supported as input.",
            "forceType": "object"
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Base64",
            "description": "Base64 encoded string for the file from which data will be extracted. If the value is an array of base64 strings, each string will be combined into one PDF before getting run through the model.",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            }
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Inputurl",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, HEIC, SVG, TIFF, TIF, TXT, or GIF.",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            }
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "title": "Sftp",
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          }
        },
        "type": "object",
        "required": [
          "ocr"
        ],
        "title": "RikAIOCRRequestBody",
        "description": "/rikai/ocr and /rikai/ocr/{model_id} request body\nDoes not serve Rikai2-Extract requests"
      },
      "RikAIRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RikAIBase64Request"
          },
          {
            "$ref": "#/components/schemas/RikAIURLRequest"
          },
          {
            "$ref": "#/components/schemas/RikAIFileRequest"
          }
        ],
        "title": "RikAIRequestBody",
        "description": "/rikai and /rikai/custom/{model_id} request body"
      },
      "RikAIResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Apiversion",
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header.",
            "forceType": "string"
          },
          "endTime": {
            "type": "integer",
            "title": "Endtime",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "title": "Starttime",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Answer"
            },
            "type": "array",
            "title": "Data",
            "description": "Question and answer data for each question asked in the request."
          },
          "documentId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentid",
            "description": "The unique identifier for the document. If `fileId` is supplied in the request, it is used as the `documentId`; otherwise, a random UUID is generated.",
            "forceType": "string"
          },
          "pages": {
            "type": "integer",
            "title": "Pages",
            "description": "Number of pages in the document."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Questions",
            "description": "Number of questions asked.",
            "forceType": "integer"
          },
          "baseModel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Basemodel",
            "description": "Base model used during data extraction.",
            "forceType": "string"
          },
          "ocrResults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ocrresults",
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request.",
            "forceType": "object",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "settings": {
            "type": "object",
            "title": "Settings",
            "description": "JSON containing any custom user settings specified in the request."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "JSON from the request `metadata` field."
          },
          "language": {
            "type": "string",
            "title": "Language",
            "description": "Language results are translated into."
          }
        },
        "type": "object",
        "required": [
          "model",
          "pages",
          "questions"
        ],
        "title": "RikAIResponse",
        "description": "/rikai, /rikai/custom/{model_id}, /rikai/ocr, /rikai/ocr/{model_id},\n/rikai/chat, and /rikai/chat/{model_id} response"
      },
      "RikAIURLRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "mostUsed": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Inputurl",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, HEIC, SVG, TIFF, TIF, TXT, or GIF."
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "title": "Sftp",
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "ocr": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Ocr",
            "description": "OCR data for the document (entire response from [OCR endpoint (version: 2)](../../ocr/ocr_v2), [example here](https://lazarus-ai.atlassian.net/wiki/external/YmIwNDNmNWZmNzhhNGYwNDg3MjBlNmFhOTgwMzAwNjc)). If included, we do not run OCR on the document and use these results instead. Only OCR data obtained from the Lazarus OCR endpoint (include version: 2 in the header) is supported as input.",
            "forceType": "object",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "forceBase64": {
            "type": "boolean",
            "title": "Forcebase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "inputURL"
        ],
        "title": "RikAIURLRequest",
        "description": "/rikai and /rikai/custom/{model_id} url request"
      },
      "SFTP": {
        "properties": {
          "user": {
            "type": "string",
            "title": "user",
            "description": "SFTP username."
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "SFTP password. Either `password` or `privateKey` are required."
          },
          "privateKey": {
            "type": "string",
            "title": "Privatekey",
            "description": "Base64 encoded SFTP private key. Either `password` or `privateKey` are required."
          },
          "privateKeyPassphrase": {
            "type": "string",
            "title": "Privatekeypassphrase",
            "description": "Optional passphrase to use if private key is protected."
          }
        },
        "type": "object",
        "required": [
          "user"
        ],
        "title": "SFTP",
        "description": "SFTP authentication model, request body"
      },
      "Settings": {
        "properties": {
          "verbose": {
            "type": "boolean",
            "title": "Verbose",
            "description": "When set to true, enables verbose mode, more detailed and complex responses",
            "forceExclude": true
          },
          "temperature": {
            "type": "number",
            "title": "Temperature",
            "description": "Adjusts the verbosity level of responses, with higher float values increasing the detail of the output",
            "forceExclude": true
          },
          "safety": {
            "type": "boolean",
            "title": "Safety",
            "forceExclude": true
          },
          "version": {
            "type": "string",
            "title": "Version",
            "forceExclude": true
          },
          "sendFile": {
            "type": "boolean",
            "title": "Sendfile",
            "forceExclude": true
          },
          "msOCR": {
            "type": "boolean",
            "title": "Msocr",
            "description": "Set to true if OCR passed is Microsoft's OCR.",
            "forceExclude": true
          },
          "advancedVision": {
            "type": "boolean",
            "title": "Advancedvision",
            "description": "Set to `true` to enable advanced features such as checkboxes and tables.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "advancedExplainability": {
            "type": "boolean",
            "title": "Advancedexplainability",
            "description": "When set to `false`, the model processes requests faster but does not return the full explainability. Set to `true` to include full explainability.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "returnConfidence": {
            "type": "boolean",
            "title": "Returnconfidence",
            "description": "Set to true to include bounding boxes and confidence score in response. Click [here](/../../models/Rikai/rikai2-extract/overview#returning-confidence-scores-and-bounding-boxes) for prompting guidelines to ensure optimal results when using this field.",
            "models": {
              "RikAI2": {
                "forceExclude": true
              }
            }
          }
        },
        "type": "object",
        "title": "Settings",
        "description": "Settings model, request body"
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "SUBMITTED",
          "FAILURE",
          "AUTH_FAILURE",
          "RUNNING"
        ],
        "title": "StatusEnum",
        "description": "Status enum for responses"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WebhookCheckRequest": {
        "properties": {
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "mostUsed": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "webhook"
        ],
        "title": "WebhookCheckRequest",
        "description": "Potential fields for Webhook Check"
      },
      "WebhookCheckRequestBody": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WebhookCheckRequest"
          }
        ],
        "title": "WebhookCheckRequestBody",
        "description": "/developer/webhook url request"
      },
      "DeveloperResponse": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "DeveloperResponse",
        "description": "/developer response"
      },
      "WebhookTestResponse": {
        "properties": {
          "webhook_status_code": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Status code returned by your webhook"
          },
          "webhook_error": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "Error returned from a failed request to your webhook"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "WebhookTestResponse",
        "description": "/developer/webhook response"
      },
      "ZipBase64Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "forceRequire": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "ocr": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Ocr",
            "description": "OCR data for the document (entire response from [OCR endpoint (version: 2)](../../ocr/ocr_v2), [example here](https://lazarus-ai.atlassian.net/wiki/external/YmIwNDNmNWZmNzhhNGYwNDg3MjBlNmFhOTgwMzAwNjc)). If included, we do not run OCR on the document and use these results instead. Only OCR data obtained from the Lazarus OCR endpoint (include version: 2 in the header) is supported as input.",
            "forceType": "object",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Outputurl",
            "description": "URL where resulting [ZIP file](../../outputurl) or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "title": "Outputurlheaders",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {},
            "forceType": "object",
            "setDefault": "None"
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "title": "Sftp",
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "title": "Returnjson",
            "description": "Specifies the format of the response sent to `outputURL`. When set to true, a JSON response is sent to the `outputURL`. Set to false to send a ZIP file instead.",
            "default": true
          },
          "statusId": {
            "type": "string",
            "title": "Statusid",
            "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release.",
            "forceExclude": true
          },
          "bulkStartTime": {
            "type": "integer",
            "title": "Bulkstarttime",
            "description": "Bulk request start time in Unix timestamp in milliseconds."
          },
          "zipQueuedTime": {
            "type": "integer",
            "title": "Zipqueuedtime",
            "description": "Time when /zip is sent to task queue in Unix timestamp in milliseconds."
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "Base64",
            "description": "Base64 encoded string for the file from which data will be extracted. If the value is an array of base64 strings, each string will be combined into one PDF before getting run through the model."
          }
        },
        "type": "object",
        "required": [
          "base64"
        ],
        "title": "ZipBase64Request",
        "description": "/rikai/zip and /rikai/zip/{model_id} base64 request"
      },
      "ZipRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ZipBase64Request"
          },
          {
            "$ref": "#/components/schemas/ZipURLRequest"
          }
        ],
        "title": "ZipRequestBody",
        "description": "/rikai/zip and /rikai/zip/{model_id} request body"
      },
      "ZipResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Apiversion",
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header.",
            "forceType": "string"
          },
          "endTime": {
            "type": "integer",
            "title": "Endtime",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "title": "Starttime",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "code": {
            "type": "integer",
            "title": "Code",
            "description": "Response code."
          },
          "documentId": {
            "type": "string",
            "title": "Documentid",
            "description": "The unique identifier for the document. If `fileId` is supplied in the request, it is used as the `documentId`; otherwise, a random UUID is generated."
          },
          "statusId": {
            "type": "string",
            "title": "Statusid",
            "description": "A list of document IDs, each representing an uploaded file. Each ID is a randomly generated UUID. These IDs serve as input for retrieving the status of an asynchronous request via the `/rikai/zip/async/{statusId}` endpoint."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "JSON from the request `metadata` field."
          },
          "ocrResults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ocrresults",
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request.",
            "forceExclude": true
          },
          "organization": {
            "type": "string",
            "title": "Organization",
            "description": "Organization ID."
          },
          "pages": {
            "type": "integer",
            "title": "Pages",
            "description": "Number of pages in the document."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Questions",
            "description": "Number of questions asked.",
            "forceType": "integer"
          },
          "warning": {
            "type": "object",
            "title": "Warning",
            "description": "Warnings such as webhook failure."
          }
        },
        "type": "object",
        "required": [
          "model",
          "code",
          "organization",
          "pages"
        ],
        "title": "ZipResponse",
        "description": "/rikai/zip and /rikai/zip/{model_id} response"
      },
      "ZipURLRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Question",
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary.",
            "forceRequire": true,
            "models": {
              "RikAI2": {
                "description": "A string containing the question to be asked.",
                "examples": [
                  "What is the name of the patient?"
                ],
                "type": "string"
              },
              "RikAI2-Extract": {
                "anyOf": [
                  {
                    "type": "object"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A JSON string or a dictionary containing the question(s) to be asked.",
                "examples": [
                  "{\"PatientInfo\": {\"FirstName\": {\"data\": \"Patient first name\", \"page_number\": 0}, \"LastName\": {\"data\": \"Patient last name\", \"page_number\": 0}}}"
                ]
              },
              "Riky2": {
                "anyOf": [
                  {
                    "type": "list"
                  },
                  {
                    "type": "string"
                  }
                ],
                "description": "A string or list of strings containing the question(s) to be asked.",
                "examples": [
                  [
                    "What is the first medication listed under Section C - Medical Information?",
                    "What is its strength?"
                  ]
                ]
              }
            }
          },
          "fileId": {
            "type": "string",
            "title": "Fileid",
            "description": "Custom ID for uploaded file, returned as `documentId` in the response. Requests with multiple files accept unique fileIds for each file. FileIds can be used to facilitate tracking, referencing, and managing input and output files efficiently.",
            "examples": [
              "file1.pdf"
            ],
            "setDefault": "UUID"
          },
          "returnOCR": {
            "type": "boolean",
            "title": "Returnocr",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            },
            "setDefault": false
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
            "forceExclude": true
          },
          "language": {
            "type": "string",
            "title": "language",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers and explainability into. [List of supported codes.](../../../prompting-guide/faq/#supported-languages)"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "forceType": "object",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            },
            "mostUsed": true
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Webhook",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Click here](/../../models/rikai/webhook-examples) for an example of a webhook URL response.",
            "forceRequire": true
          },
          "webhookHeaders": {
            "type": "object",
            "title": "Webhookheaders",
            "description": "Request headers to include in the POST requests to the webhook.",
            "mostUsed": true
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "Webhooksendfull",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true,
            "mostUsed": true
          },
          "forceOCR": {
            "type": "boolean",
            "title": "Forceocr",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "staticIP": {
            "type": "boolean",
            "title": "Staticip",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "setDefault": false
          },
          "ocr": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "object"
              }
            ],
            "title": "Ocr",
            "description": "OCR data for the document (entire response from [OCR endpoint (version: 2)](../../ocr/ocr_v2), [example here](https://lazarus-ai.atlassian.net/wiki/external/YmIwNDNmNWZmNzhhNGYwNDg3MjBlNmFhOTgwMzAwNjc)). If included, we do not run OCR on the document and use these results instead. Only OCR data obtained from the Lazarus OCR endpoint (include version: 2 in the header) is supported as input.",
            "forceType": "object",
            "models": {
              "RikAI2-Extract": {
                "forceExclude": true
              }
            }
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Outputurl",
            "description": "URL where resulting [ZIP file](../../outputurl) or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "title": "Outputurlheaders",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {},
            "forceType": "object",
            "setDefault": "None"
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "title": "Sftp",
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "title": "Returnjson",
            "description": "Specifies the format of the response sent to `outputURL`. When set to true, a JSON response is sent to the `outputURL`. Set to false to send a ZIP file instead.",
            "default": true
          },
          "statusId": {
            "type": "string",
            "title": "Statusid",
            "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release.",
            "forceExclude": true
          },
          "bulkStartTime": {
            "type": "integer",
            "title": "Bulkstarttime",
            "description": "Bulk request start time in Unix timestamp in milliseconds."
          },
          "zipQueuedTime": {
            "type": "integer",
            "title": "Zipqueuedtime",
            "description": "Time when /zip is sent to task queue in Unix timestamp in milliseconds."
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "title": "Inputurl",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, HEIC, SVG, TIFF, TIF, TXT, or GIF."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "Forcebase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "inputURL"
        ],
        "title": "ZipURLRequest",
        "description": "/rikai/zip and /rikai/zip/{model_id} url request"
      }
    }
  }
}