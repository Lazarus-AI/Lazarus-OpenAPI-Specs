{
  "openapi": "3.1.0",
  "info": {
    "title": "RikAI-Extract",
    "version": "",
    "description": "",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "termsOfService": "https://www.lazarusforms.com/legal",
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusforms.com"
    },
    "summary": ""
  },
  "paths": {
    "/rikai/custom/{model_id}": {
      "post": {
        "summary": "Document input, JSON response",
        "description": "Make a request to a RikAI2-Extract and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_custom",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for request."
            },
            "description": "API version used for request."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RikAIRequestBody"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RikAIFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "supportFormData": true,
        "models": {
          "RikAI2": {
            "forceExclude": true
          }
        }
      }
    },
    "/rikai/zip/{model_id}": {
      "post": {
        "summary": "Document input, ZIP file response",
        "description": "Make a request to a RikAI2-Extract and receive response data in a ZIP file.\n To process your request asynchronously and send the ZIP file to an `outputURL`, include the `async` query parameter. \n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if `fileId` field is not included in the request.",
        "operationId": "post_zip_custom",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "async",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "async",
              "description": "Runs request asynchronously"
            },
            "description": "Runs request asynchronously"
          },
          {
            "name": "bulk",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "bulk",
              "description": "Lets zip endpoints know if a request is coming from a bulk endpoint. Internal use only.",
              "forceExclude": true
            },
            "description": "Lets zip endpoints know if a request is coming from a bulk endpoint. Internal use only."
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for request."
            },
            "description": "API version used for request."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZipRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "models": {
          "RikAI2": {
            "forceExclude": true
          }
        }
      }
    },
    "/rikai/bulk/{model_id}": {
      "post": {
        "summary": "Bulk file upload",
        "description": "Upload 1 or more files to a RikAI2-Extract for asynchronous processing. By default, a ZIP file will be uploaded to your `outputURL` for each document in the request. If you set the `returnJSON` parameter to true, a JSON file will be provided to the `outputURL` instead.\n\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if a file name could not be extracted from file data.",
        "operationId": "post_bulk_custom",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for request."
            },
            "description": "API version used for request."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rikai/zip/async/{status_id}": {
      "get": {
        "summary": "Get Async Status Rikai",
        "description": "Retrieves the status of a bulk async API request\n\nArgs:\n    request (Request): FastAPI request object\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth key from request headers\n    status_id (str): Status ID of the document from request path parameters\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "get_async_status_rikai_rikai_zip_async__status_id__get",
        "parameters": [
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "status_id",
              "description": "Status ID"
            },
            "description": "Status ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for request."
            },
            "description": "API version used for request."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Answer": {
        "properties": {
          "answer": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "Model's answer to the question asked. For the RikAI2-Extract endpoint, the model fills the JSON structure that was provided for input."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "The question asked."
          },
          "context": {
            "type": "string",
            "description": "Where in the document the answer was found."
          },
          "confidence": {
            "type": "number",
            "description": "Answer confidence score ranging from 0 to 1."
          },
          "translated": {
            "type": "string",
            "description": "Translated answer if the `language` field was included in the request"
          }
        },
        "type": "object",
        "required": [
          "answer",
          "question"
        ],
        "title": "Answer",
        "description": "Answer model, data for each Q&A in response"
      },
      "AsyncStatusResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for request."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          }
        },
        "type": "object",
        "required": [
          "model"
        ],
        "title": "AsyncStatusResponse",
        "description": "/rikai/zip/async/{status_id} response"
      },
      "BulkBase64Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Custom ID for document."
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
          }
        },
        "type": "object",
        "required": [
          "base64",
          "question"
        ],
        "title": "BulkBase64Request",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} base64 request"
      },
      "BulkRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BulkBase64Request"
          },
          {
            "$ref": "#/components/schemas/BulkURLRequest"
          }
        ],
        "title": "BulkRequestBody",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} request body",
        "properties": {}
      },
      "BulkResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for request."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "statusId": {
            "type": "object",
            "description": "List of document IDs for each file uploaded."
          },
          "failedRequests": {
            "items": {},
            "type": "array",
            "description": "File requests that failed to queue."
          },
          "message": {
            "type": "string",
            "description": "Status message."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request `metadata` field."
          },
          "warning": {
            "type": "object",
            "description": "Warnings such as webhook failure."
          }
        },
        "type": "object",
        "required": [
          "model",
          "statusId",
          "message"
        ],
        "title": "BulkResponse",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} response"
      },
      "BulkURLRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Custom ID for document."
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          },
          "inputURL": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "inputURL",
          "question"
        ],
        "title": "BulkURLRequest",
        "description": "/rikai/bulk and /rikai/bulk/{model_id} url request"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InputOutputSFTP": {
        "properties": {
          "inputURL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              }
            ],
            "description": "SFTP server authentication info for the `inputURL`."
          },
          "outputURL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              }
            ],
            "description": "SFTP server authentication info for the `outputURL`."
          }
        },
        "type": "object",
        "title": "InputOutputSFTP",
        "description": "SFTP server info for inputURL and outputURL"
      },
      "RikAIBase64Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
          }
        },
        "type": "object",
        "required": [
          "base64",
          "question"
        ],
        "title": "RikAIBase64Request",
        "description": "/rikai and /rikai/custom/{model_id} base64 request"
      },
      "RikAIChatRequestBody": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          }
        },
        "type": "object",
        "title": "RikAIChatRequestBody",
        "description": "/rikai/chat and /rikai/chat/{model_id} request body\nDoes not serve Rikai2-Extract requests"
      },
      "RikAIFileRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File to upload: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF, or TXT."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "file",
          "question"
        ],
        "title": "RikAIFileRequest",
        "description": "/rikai and /rikai/custom/{model_id} file request"
      },
      "RikAIOCRRequestBody": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "ocr": {
            "description": "OCR data used as input.",
            "type": "object"
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            }
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT.",
            "models": {
              "Riky2": {
                "forceExclude": true
              }
            }
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          }
        },
        "type": "object",
        "required": [
          "ocr",
          "question"
        ],
        "title": "RikAIOCRRequestBody",
        "description": "/rikai/ocr and /rikai/ocr/{model_id} request body\nDoes not serve Rikai2-Extract requests"
      },
      "RikAIRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RikAIBase64Request"
          },
          {
            "$ref": "#/components/schemas/RikAIURLRequest"
          }
        ],
        "title": "RikAIRequestBody",
        "description": "/rikai and /rikai/custom/{model_id} request body",
        "properties": {}
      },
      "RikAIResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for request."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "data": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Answer"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/Summary"
              }
            ],
            "description": "Question and answer data for each question asked in the request."
          },
          "documentId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID for document request or filename if specified."
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Number of questions asked."
          },
          "baseModel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Base model used during data extraction."
          },
          "settings": {
            "type": "object",
            "description": "JSON containing any custom user settings specified in the request."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request `metadata` field."
          },
          "language": {
            "type": "string",
            "description": "Language results are translated into."
          }
        },
        "type": "object",
        "required": [
          "model",
          "pages",
          "questions"
        ],
        "title": "RikAIResponse",
        "description": "/rikai, /rikai/custom/{model_id}, /rikai/ocr, /rikai/ocr/{model_id},\n/rikai/chat, and /rikai/chat/{model_id} response"
      },
      "RikAIURLRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "inputURL",
          "question"
        ],
        "title": "RikAIURLRequest",
        "description": "/rikai and /rikai/custom/{model_id} url request"
      },
      "SFTP": {
        "properties": {
          "user": {
            "type": "string",
            "description": "SFTP username."
          },
          "password": {
            "type": "string",
            "description": "SFTP password. Either `password` or `privateKey` are required."
          },
          "privateKey": {
            "type": "string",
            "description": "Base64 encoded SFTP private key. Either `password` or `privateKey` are required."
          },
          "privateKeyPassphrase": {
            "type": "string",
            "description": "Optional passphrase to use if private key is protected."
          }
        },
        "type": "object",
        "required": [
          "user"
        ],
        "title": "SFTP",
        "description": "SFTP authentication model, request body"
      },
      "Settings": {
        "properties": {
          "returnConfidence": {
            "type": "boolean",
            "description": "Set to true to include bounding boxes and confidence score in response.",
            "models": {
              "RikAI2": {
                "forceExclude": true
              },
              "Riky2": {
                "forceExclude": true
              }
            }
          }
        },
        "type": "object",
        "title": "Settings",
        "description": "Settings model, request body"
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "SUBMITTED",
          "FAILURE",
          "AUTH_FAILURE",
          "RUNNING"
        ],
        "title": "StatusEnum",
        "description": "Status enum for responses",
        "properties": {}
      },
      "Summary": {
        "properties": {
          "summary": {
            "type": "string",
            "description": "Model generated summary. Corresponds to summary description."
          },
          "translatedSummary": {
            "type": "string",
            "description": "Model generated translated summary. Corresponds to summary translated description."
          }
        },
        "type": "object",
        "required": [
          "summary"
        ],
        "title": "Summary",
        "description": "Summary response model for Riky Medical Summarizer"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array"
          },
          "msg": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ZipBase64Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
            "default": true
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release."
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
          }
        },
        "type": "object",
        "required": [
          "base64",
          "question"
        ],
        "title": "ZipBase64Request",
        "description": "/rikai/zip and /rikai/zip/{model_id} base64 request"
      },
      "ZipRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ZipBase64Request"
          },
          {
            "$ref": "#/components/schemas/ZipURLRequest"
          }
        ],
        "title": "ZipRequestBody",
        "description": "/rikai/zip and /rikai/zip/{model_id} request body",
        "properties": {}
      },
      "ZipResponse": {
        "properties": {
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for request."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "code": {
            "type": "integer",
            "description": "Response code."
          },
          "documentId": {
            "type": "string",
            "description": "ID for document request or filename if specified."
          },
          "statusId": {
            "type": "string",
            "description": "List of document IDs for each file uploaded."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request `metadata` field."
          },
          "organization": {
            "type": "string",
            "description": "Organization ID."
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Number of questions asked."
          },
          "warning": {
            "type": "object",
            "description": "Warnings such as webhook failure."
          }
        },
        "type": "object",
        "required": [
          "model",
          "code",
          "organization",
          "pages"
        ],
        "title": "ZipResponse",
        "description": "/rikai/zip and /rikai/zip/{model_id} response"
      },
      "ZipURLRequest": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "A JSON string or a dictionary containing the question(s) to be asked.",
            "examples": []
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "default": "file name"
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
          },
          "settings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Settings"
              }
            ],
            "description": "Optional user settings.",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
            "default": true
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release."
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false
          }
        },
        "type": "object",
        "required": [
          "inputURL",
          "question"
        ],
        "title": "ZipURLRequest",
        "description": "/rikai/zip and /rikai/zip/{model_id} url request"
      }
    }
  },
  "schemas": {
    "Answer": {
      "properties": {
        "answer": {
          "anyOf": [
            {
              "items": {},
              "type": "array"
            },
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ],
          "description": "Model's answer to the question asked. For the RikAI2-Extract endpoint, the model fills the JSON structure that was provided for input."
        },
        "question": {
          "anyOf": [
            {
              "items": {},
              "type": "array"
            },
            {
              "type": "string"
            },
            {
              "type": "object"
            }
          ],
          "description": "The question asked."
        },
        "context": {
          "type": "string",
          "description": "Where in the document the answer was found."
        },
        "confidence": {
          "type": "number",
          "description": "Answer confidence score ranging from 0 to 1."
        },
        "translated": {
          "type": "string",
          "description": "Translated answer if the `language` field was included in the request"
        }
      },
      "type": "object",
      "required": [
        "answer",
        "question"
      ],
      "title": "Answer",
      "description": "Answer model, data for each Q&A in response"
    },
    "AsyncStatusResponse": {
      "properties": {
        "apiVersion": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "API version used for request."
        },
        "endTime": {
          "type": "integer",
          "description": "Request end time recorded in epoch (Unix timestamp) format."
        },
        "id": {
          "type": "string",
          "description": "Response ID"
        },
        "model": {
          "type": "string",
          "description": "Model used to process the document."
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/StatusEnum"
            }
          ],
          "description": "Status of the request."
        },
        "startTime": {
          "type": "integer",
          "description": "Request start time recorded in epoch (Unix timestamp) format."
        }
      },
      "type": "object",
      "required": [
        "model"
      ],
      "title": "AsyncStatusResponse",
      "description": "/rikai/zip/async/{status_id} response"
    },
    "BulkBase64Request": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "Custom ID for document."
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "outputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
        },
        "outputURLHeaders": {
          "type": "object",
          "description": "Request headers to include in the PUT request to the output URL.",
          "default": {}
        },
        "sftp": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            },
            {
              "$ref": "#/components/schemas/InputOutputSFTP"
            }
          ],
          "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
        },
        "returnJSON": {
          "type": "boolean",
          "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
        },
        "bigFile": {
          "type": "boolean",
          "title": "Bigfile",
          "description": "Allows large file inputs. Automatically sets to `true` when the whole request (Base64 string and prompt) is greater than 1 MB.",
          "forceExclude": true
        },
        "internalQueue": {
          "type": "boolean",
          "title": "Internalqueue",
          "description": "Use internal task queue when set to true.",
          "default": false,
          "forceExclude": true
        },
        "base64": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
        }
      },
      "type": "object",
      "required": [
        "base64",
        "question"
      ],
      "title": "BulkBase64Request",
      "description": "/rikai/bulk and /rikai/bulk/{model_id} base64 request"
    },
    "BulkRequestBody": {
      "oneOf": [
        {
          "$ref": "#/components/schemas/BulkBase64Request"
        },
        {
          "$ref": "#/components/schemas/BulkURLRequest"
        }
      ],
      "title": "BulkRequestBody",
      "description": "/rikai/bulk and /rikai/bulk/{model_id} request body"
    },
    "BulkResponse": {
      "properties": {
        "apiVersion": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "API version used for request."
        },
        "endTime": {
          "type": "integer",
          "description": "Request end time recorded in epoch (Unix timestamp) format."
        },
        "id": {
          "type": "string",
          "description": "Response ID"
        },
        "model": {
          "type": "string",
          "description": "Model used to process the document."
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/StatusEnum"
            }
          ],
          "description": "Status of the request."
        },
        "startTime": {
          "type": "integer",
          "description": "Request start time recorded in epoch (Unix timestamp) format."
        },
        "statusId": {
          "type": "object",
          "description": "List of document IDs for each file uploaded."
        },
        "failedRequests": {
          "items": {},
          "type": "array",
          "description": "File requests that failed to queue."
        },
        "message": {
          "type": "string",
          "description": "Status message."
        },
        "metadata": {
          "type": "object",
          "description": "JSON from the request `metadata` field."
        },
        "warning": {
          "type": "object",
          "description": "Warnings such as webhook failure."
        }
      },
      "type": "object",
      "required": [
        "model",
        "statusId",
        "message"
      ],
      "title": "BulkResponse",
      "description": "/rikai/bulk and /rikai/bulk/{model_id} response"
    },
    "BulkURLRequest": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "Custom ID for document."
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "outputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
        },
        "outputURLHeaders": {
          "type": "object",
          "description": "Request headers to include in the PUT request to the output URL.",
          "default": {}
        },
        "sftp": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            },
            {
              "$ref": "#/components/schemas/InputOutputSFTP"
            }
          ],
          "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
        },
        "returnJSON": {
          "type": "boolean",
          "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
        },
        "bigFile": {
          "type": "boolean",
          "title": "Bigfile",
          "description": "Allows large file inputs. Automatically sets to `true` when the whole request (Base64 string and prompt) is greater than 1 MB.",
          "forceExclude": true
        },
        "internalQueue": {
          "type": "boolean",
          "title": "Internalqueue",
          "description": "Use internal task queue when set to true.",
          "default": false,
          "forceExclude": true
        },
        "inputURL": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
        },
        "forceBase64": {
          "type": "boolean",
          "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
          "setDefault": false
        }
      },
      "type": "object",
      "required": [
        "inputURL",
        "question"
      ],
      "title": "BulkURLRequest",
      "description": "/rikai/bulk and /rikai/bulk/{model_id} url request"
    },
    "HTTPValidationError": {
      "properties": {
        "detail": {
          "items": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "type": "array"
        }
      },
      "type": "object",
      "title": "HTTPValidationError"
    },
    "InputOutputSFTP": {
      "properties": {
        "inputURL": {
          "allOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            }
          ],
          "description": "SFTP server authentication info for the `inputURL`."
        },
        "outputURL": {
          "allOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            }
          ],
          "description": "SFTP server authentication info for the `outputURL`."
        }
      },
      "type": "object",
      "title": "InputOutputSFTP",
      "description": "SFTP server info for inputURL and outputURL"
    },
    "RikAIBase64Request": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "base64": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
        },
        "ocr": {
          "description": "OCR data for the document. If included, we do not run OCR and use these results instead.",
          "type": "object",
          "forceExclude": true
        }
      },
      "type": "object",
      "required": [
        "base64",
        "question"
      ],
      "title": "RikAIBase64Request",
      "description": "/rikai and /rikai/custom/{model_id} base64 request"
    },
    "RikAIChatRequestBody": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "title": "Returnocr",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "default": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "ocr": {
          "anyOf": [
            {
              "items": {},
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "title": "Ocr",
          "description": "OCR data for the document. If included, we do not run OCR and use these results instead.",
          "forceExclude": true
        },
        "base64": {
          "type": "string",
          "title": "Base64",
          "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
          "forceExclude": true
        }
      },
      "type": "object",
      "title": "RikAIChatRequestBody",
      "description": "/rikai/chat and /rikai/chat/{model_id} request body\nDoes not serve Rikai2-Extract requests"
    },
    "RikAIFileRequest": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "file": {
          "type": "string",
          "format": "binary",
          "description": "File to upload: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF, or TXT."
        },
        "forceBase64": {
          "type": "boolean",
          "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
          "setDefault": false
        }
      },
      "type": "object",
      "required": [
        "file",
        "question"
      ],
      "title": "RikAIFileRequest",
      "description": "/rikai and /rikai/custom/{model_id} file request"
    },
    "RikAIOCRRequestBody": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "title": "Forceocr",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "default": false,
          "forceExclude": true
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "ocr": {
          "description": "OCR data used as input.",
          "type": "object"
        },
        "base64": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
          "models": {
            "Riky2": {
              "forceExclude": true
            }
          }
        },
        "inputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT.",
          "models": {
            "Riky2": {
              "forceExclude": true
            }
          }
        },
        "sftp": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            },
            {
              "$ref": "#/components/schemas/InputOutputSFTP"
            }
          ],
          "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
        }
      },
      "type": "object",
      "required": [
        "ocr",
        "question"
      ],
      "title": "RikAIOCRRequestBody",
      "description": "/rikai/ocr and /rikai/ocr/{model_id} request body\nDoes not serve Rikai2-Extract requests"
    },
    "RikAIRequestBody": {
      "oneOf": [
        {
          "$ref": "#/components/schemas/RikAIBase64Request"
        },
        {
          "$ref": "#/components/schemas/RikAIURLRequest"
        }
      ],
      "title": "RikAIRequestBody",
      "description": "/rikai and /rikai/custom/{model_id} request body"
    },
    "RikAIResponse": {
      "properties": {
        "apiVersion": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "API version used for request."
        },
        "endTime": {
          "type": "integer",
          "description": "Request end time recorded in epoch (Unix timestamp) format."
        },
        "id": {
          "type": "string",
          "description": "Response ID"
        },
        "model": {
          "type": "string",
          "description": "Model used to process the document."
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/StatusEnum"
            }
          ],
          "description": "Status of the request."
        },
        "startTime": {
          "type": "integer",
          "description": "Request start time recorded in epoch (Unix timestamp) format."
        },
        "data": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/components/schemas/Answer"
              },
              "type": "array"
            },
            {
              "$ref": "#/components/schemas/Summary"
            }
          ],
          "description": "Question and answer data for each question asked in the request."
        },
        "documentId": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "ID for document request or filename if specified."
        },
        "pages": {
          "type": "integer",
          "description": "Number of pages in the document."
        },
        "questions": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "description": "Number of questions asked."
        },
        "baseModel": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "Base model used during data extraction."
        },
        "ocrResults": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request.",
          "forceExclude": true
        },
        "settings": {
          "type": "object",
          "description": "JSON containing any custom user settings specified in the request."
        },
        "metadata": {
          "type": "object",
          "description": "JSON from the request `metadata` field."
        },
        "language": {
          "type": "string",
          "description": "Language results are translated into."
        }
      },
      "type": "object",
      "required": [
        "model",
        "pages",
        "questions"
      ],
      "title": "RikAIResponse",
      "description": "/rikai, /rikai/custom/{model_id}, /rikai/ocr, /rikai/ocr/{model_id},\n/rikai/chat, and /rikai/chat/{model_id} response"
    },
    "RikAIURLRequest": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "inputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
        },
        "sftp": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            },
            {
              "$ref": "#/components/schemas/InputOutputSFTP"
            }
          ],
          "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
        },
        "ocr": {
          "description": "OCR data for the document. If included, we do not run OCR and use these results instead.",
          "type": "object",
          "forceExclude": true
        },
        "forceBase64": {
          "type": "boolean",
          "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
          "setDefault": false
        }
      },
      "type": "object",
      "required": [
        "inputURL",
        "question"
      ],
      "title": "RikAIURLRequest",
      "description": "/rikai and /rikai/custom/{model_id} url request"
    },
    "SFTP": {
      "properties": {
        "user": {
          "type": "string",
          "description": "SFTP username."
        },
        "password": {
          "type": "string",
          "description": "SFTP password. Either `password` or `privateKey` are required."
        },
        "privateKey": {
          "type": "string",
          "description": "Base64 encoded SFTP private key. Either `password` or `privateKey` are required."
        },
        "privateKeyPassphrase": {
          "type": "string",
          "description": "Optional passphrase to use if private key is protected."
        }
      },
      "type": "object",
      "required": [
        "user"
      ],
      "title": "SFTP",
      "description": "SFTP authentication model, request body"
    },
    "Settings": {
      "properties": {
        "verbose": {
          "type": "boolean",
          "title": "Verbose",
          "description": "When set to true, enables verbose mode, more detailed and complex responses",
          "forceExclude": true
        },
        "temperature": {
          "type": "number",
          "title": "Temperature",
          "description": "Adjusts the verbosity level of responses, with higher float values increasing the detail of the output",
          "forceExclude": true
        },
        "safety": {
          "type": "boolean",
          "title": "Safety",
          "forceExclude": true
        },
        "version": {
          "type": "string",
          "title": "Version",
          "forceExclude": true
        },
        "sendFile": {
          "type": "boolean",
          "title": "Sendfile",
          "forceExclude": true
        },
        "msOCR": {
          "type": "boolean",
          "title": "Msocr",
          "description": "Set to true if OCR passed is Microsoft's OCR.",
          "forceExclude": true
        },
        "advancedVision": {
          "type": "boolean",
          "description": "Set to `true` to enable advanced features such as checkboxes and tables.",
          "setDefault": false,
          "forceExclude": true
        },
        "advancedExplainability": {
          "type": "boolean",
          "title": "Advancedexplainability",
          "description": "Set to `false` to turn off context and explanation. Decreases model processing time.",
          "forceExclude": true,
          "setDefault": true
        },
        "returnConfidence": {
          "type": "boolean",
          "description": "Set to true to include bounding boxes and confidence score in response.",
          "models": {
            "RikAI2": {
              "forceExclude": true
            },
            "Riky2": {
              "forceExclude": true
            }
          }
        }
      },
      "type": "object",
      "title": "Settings",
      "description": "Settings model, request body"
    },
    "StatusEnum": {
      "type": "string",
      "enum": [
        "SUCCESS",
        "SUBMITTED",
        "FAILURE",
        "AUTH_FAILURE",
        "RUNNING"
      ],
      "title": "StatusEnum",
      "description": "Status enum for responses"
    },
    "Summary": {
      "properties": {
        "summary": {
          "type": "string",
          "description": "Model generated summary. Corresponds to summary description."
        },
        "translatedSummary": {
          "type": "string",
          "description": "Model generated translated summary. Corresponds to summary translated description."
        }
      },
      "type": "object",
      "required": [
        "summary"
      ],
      "title": "Summary",
      "description": "Summary response model for Riky Medical Summarizer"
    },
    "ValidationError": {
      "properties": {
        "loc": {
          "items": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "type": "array"
        },
        "msg": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "type": "object",
      "required": [
        "loc",
        "msg",
        "type"
      ],
      "title": "ValidationError"
    },
    "ZipBase64Request": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "ocr": {
          "description": "OCR data for the document. If included, we do not run OCR and use these results instead.",
          "type": "object",
          "forceExclude": true
        },
        "outputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
        },
        "outputURLHeaders": {
          "type": "object",
          "description": "Request headers to include in the PUT request to the output URL.",
          "default": {}
        },
        "sftp": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            },
            {
              "$ref": "#/components/schemas/InputOutputSFTP"
            }
          ],
          "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
        },
        "returnJSON": {
          "type": "boolean",
          "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
          "default": true
        },
        "statusId": {
          "type": "string",
          "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release."
        },
        "base64": {
          "anyOf": [
            {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            {
              "type": "string"
            }
          ],
          "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
        }
      },
      "type": "object",
      "required": [
        "base64",
        "question"
      ],
      "title": "ZipBase64Request",
      "description": "/rikai/zip and /rikai/zip/{model_id} base64 request"
    },
    "ZipRequestBody": {
      "oneOf": [
        {
          "$ref": "#/components/schemas/ZipBase64Request"
        },
        {
          "$ref": "#/components/schemas/ZipURLRequest"
        }
      ],
      "title": "ZipRequestBody",
      "description": "/rikai/zip and /rikai/zip/{model_id} request body"
    },
    "ZipResponse": {
      "properties": {
        "apiVersion": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "null"
            }
          ],
          "description": "API version used for request."
        },
        "endTime": {
          "type": "integer",
          "description": "Request end time recorded in epoch (Unix timestamp) format."
        },
        "id": {
          "type": "string",
          "description": "Response ID"
        },
        "model": {
          "type": "string",
          "description": "Model used to process the document."
        },
        "status": {
          "allOf": [
            {
              "$ref": "#/components/schemas/StatusEnum"
            }
          ],
          "description": "Status of the request."
        },
        "startTime": {
          "type": "integer",
          "description": "Request start time recorded in epoch (Unix timestamp) format."
        },
        "code": {
          "type": "integer",
          "description": "Response code."
        },
        "documentId": {
          "type": "string",
          "description": "ID for document request or filename if specified."
        },
        "statusId": {
          "type": "string",
          "description": "List of document IDs for each file uploaded."
        },
        "metadata": {
          "type": "object",
          "description": "JSON from the request `metadata` field."
        },
        "ocrResults": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ],
          "title": "Ocrresults",
          "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request.",
          "forceExclude": true
        },
        "organization": {
          "type": "string",
          "description": "Organization ID."
        },
        "pages": {
          "type": "integer",
          "description": "Number of pages in the document."
        },
        "questions": {
          "anyOf": [
            {
              "type": "integer"
            },
            {
              "type": "null"
            }
          ],
          "description": "Number of questions asked."
        },
        "warning": {
          "type": "object",
          "description": "Warnings such as webhook failure."
        }
      },
      "type": "object",
      "required": [
        "model",
        "code",
        "organization",
        "pages"
      ],
      "title": "ZipResponse",
      "description": "/rikai/zip and /rikai/zip/{model_id} response"
    },
    "ZipURLRequest": {
      "properties": {
        "question": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "string"
            }
          ],
          "description": "A JSON string or a dictionary containing the question(s) to be asked.",
          "examples": []
        },
        "fileId": {
          "type": "string",
          "description": "Custom ID for document.",
          "default": "file name"
        },
        "returnOCR": {
          "type": "boolean",
          "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
          "setDefault": false,
          "forceExclude": true
        },
        "model": {
          "type": "string",
          "title": "Model",
          "description": "Indicate which base model to run. Note that each model depends on a specific base model, using this field without guidance may invalidate results or cause your request to fail.",
          "forceExclude": true
        },
        "language": {
          "type": "string",
          "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into"
        },
        "settings": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Settings"
            }
          ],
          "description": "Optional user settings.",
          "type": "object"
        },
        "metadata": {
          "type": "object",
          "description": "Custom JSON to be included in the returned response."
        },
        "webhook": {
          "type": "string",
          "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "Webhook URL to send status updates and JSON response to. This is where you will receive the output of your prompt."
        },
        "webhookHeaders": {
          "type": "object",
          "description": "Request headers to include in the POST requests to the webhook."
        },
        "webhookSendFull": {
          "type": "boolean",
          "description": "Send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status",
          "default": true
        },
        "forceOCR": {
          "type": "boolean",
          "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
          "setDefault": false
        },
        "staticIP": {
          "type": "boolean",
          "title": "Staticip",
          "description": "Set to `true` for static IP for webhook and outputURL if they exist",
          "forceExclude": true
        },
        "ocr": {
          "description": "OCR data for the document. If included, we do not run OCR and use these results instead.",
          "type": "object",
          "forceExclude": true
        },
        "outputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
        },
        "outputURLHeaders": {
          "type": "object",
          "description": "Request headers to include in the PUT request to the output URL.",
          "default": {}
        },
        "sftp": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/SFTP"
            },
            {
              "$ref": "#/components/schemas/InputOutputSFTP"
            }
          ],
          "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
        },
        "returnJSON": {
          "type": "boolean",
          "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
          "default": true
        },
        "statusId": {
          "type": "string",
          "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release."
        },
        "inputURL": {
          "type": "string",
          "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
          "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
        },
        "forceBase64": {
          "type": "boolean",
          "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
          "setDefault": false
        }
      },
      "type": "object",
      "required": [
        "inputURL",
        "question"
      ],
      "title": "ZipURLRequest",
      "description": "/rikai/zip and /rikai/zip/{model_id} url request"
    }
  },
  "servers": [{
    "url": "https://api.lazarusai.com/api",
    "description": ""
  }]
}