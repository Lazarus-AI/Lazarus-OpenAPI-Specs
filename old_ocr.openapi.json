{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "fah8rtnj42znz"
  },
  "info": {
    "title": "JSON response",
    "version": "0.1.0",
    "summary": "",
    "description": "",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusforms.com"
    },
    "termsOfService": "https://www.lazarusforms.com/legal"
  },
  "paths": {
    "/ocr": {
      "post": {
        "summary": "JSON response",
        "description": "Make a request to OCR and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `mulitpart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser. TODO: add file types\n<!-- Supports PDF, PNG, TIF, TIFF, JPE, WebP, and TXT. -->",
        "operationId": "post_ocr",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileRequest"
              }
            },
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/URLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/Base64Request"
                  }
                ],
                "title": "Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OCRResultsResponseBody"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "n83p7g50x27wa"
        }
      }
    },
    "/ocr/zip": {
      "post": {
        "summary": "ZIP file response",
        "description": "Make a request to OCR and receive response data in a ZIP file.\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if `fileId` field is not included in the request.",
        "operationId": "post_zip_ocr",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ZipURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZipBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response.",
            "content": {
              "application/zip": {
                "schema": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "0bpg1p7m0b07m"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AppearanceV1": {
        "properties": {
          "style": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StyleV1"
              }
            ],
            "title": "style",
            "description": "Style detected on line."
          }
        },
        "type": "object",
        "title": "AppearanceV1",
        "x-stoplight": {
          "id": "2a0805t56qse8"
        }
      },
      "Base64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "base64",
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "default": false
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "version": {
            "type": "integer",
            "title": "version",
            "description": "OCR model version.",
            "default": 2
          }
        },
        "type": "object",
        "title": "Base64Request",
        "description": "/forms/ocr request body with base64 file upload",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "9yy0hen3gn1vu"
        }
      },
      "ErrorMessage": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ErrorMessage",
        "description": "Response when an error occurs.",
        "x-stoplight": {
          "id": "5fdwj7uc67rbd"
        }
      },
      "FileRequest": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "file",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "default": false
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "version": {
            "type": "integer",
            "title": "version",
            "description": "OCR model version.",
            "default": 2
          }
        },
        "type": "object",
        "title": "FileRequest",
        "description": "/forms/ocr request body with local file upload",
        "required": [
          "file"
        ],
        "x-stoplight": {
          "id": "vo47g3ug6rr1b"
        }
      },
      "LineV1": {
        "properties": {
          "appearance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AppearanceV1"
              }
            ],
            "title": "appearance",
            "description": "Style data for the line."
          },
          "boundingBox": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "boundingBox",
            "description": "Bounding box coordinates of content.",
            "default": []
          },
          "text": {
            "type": "string",
            "title": "text",
            "description": "Content of the field as a string.",
            "default": ""
          },
          "words": {
            "items": {
              "$ref": "#/components/schemas/WordV1"
            },
            "type": "array",
            "title": "words",
            "description": "Words on the page."
          }
        },
        "type": "object",
        "title": "LineV1",
        "x-stoplight": {
          "id": "l7xgb4v513z51"
        }
      },
      "LineV2": {
        "properties": {
          "content": {
            "type": "string",
            "title": "content",
            "description": "Content of the field as a string.",
            "default": ""
          },
          "polygon": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "polygon",
            "description": "Bounding box coordinates of content.",
            "default": []
          },
          "spans": {
            "items": {
              "$ref": "#/components/schemas/SpanV2"
            },
            "type": "array",
            "title": "spans",
            "description": "Span where data can be found in the raw text.",
            "default": []
          }
        },
        "type": "object",
        "title": "LineV2",
        "x-stoplight": {
          "id": "19sf5zljqpop9"
        }
      },
      "OCRResultsResponseBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/OCRResultsResponseBodyV1"
          },
          {
            "$ref": "#/components/schemas/OCRResultsResponseBodyV2"
          }
        ],
        "title": "OCRResultsResponseBody",
        "discriminator": {
          "propertyName": "ocrVersion",
          "mapping": {
            "1": "#/components/schemas/OCRResultsResponseBodyV1",
            "2": "#/components/schemas/OCRResultsResponseBodyV2"
          }
        },
        "x-stoplight": {
          "id": "nsx3xrheeuss5"
        }
      },
      "OCRResultsResponseBodyV1": {
        "properties": {
          "ocrVersion": {
            "const": 1,
            "title": "Ocrversion"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "title": "status",
            "description": "Status of the request.",
            "default": "AUTH_FAILURE"
          },
          "documentId": {
            "type": "string",
            "title": "documentId",
            "description": "ID for document request or filename if specified.",
            "default": ""
          },
          "modelType": {
            "type": "string",
            "title": "modelType",
            "description": "Type of base/extraction model used, OCR or Forms.",
            "default": ""
          },
          "id": {
            "type": "string",
            "title": "id",
            "description": "Request ID.",
            "default": ""
          },
          "requestDateTime": {
            "type": "string",
            "title": "requestDateTime",
            "description": "Date and time request was made.",
            "default": ""
          },
          "startTime": {
            "type": "integer",
            "title": "startTime",
            "description": "Request start time.",
            "default": 0
          },
          "endTime": {
            "type": "integer",
            "title": "endTime",
            "description": "Request end time.",
            "default": 0
          },
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": "Number of pages in the document.",
            "default": 0
          },
          "ocrResults": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OCRResultsV1"
              }
            ],
            "title": "ocrResults",
            "description": "Model results."
          },
          "resultUrl": {
            "type": "string",
            "title": "resultURL",
            "description": "URL to the result of the OCR process.",
            "default": ""
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          }
        },
        "type": "object",
        "required": [
          "ocrVersion"
        ],
        "title": "OCRResultsResponseBodyV1",
        "x-stoplight": {
          "id": "k7huxspqj0b5f"
        }
      },
      "OCRResultsResponseBodyV2": {
        "properties": {
          "ocrVersion": {
            "const": 2,
            "title": "Ocrversion"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "title": "status",
            "description": "Status of the request.",
            "default": "AUTH_FAILURE"
          },
          "documentId": {
            "type": "string",
            "title": "documentId",
            "description": "ID for document request or filename if specified.",
            "default": ""
          },
          "modelType": {
            "type": "string",
            "title": "modelType",
            "description": "Type of base/extraction model used, OCR or Forms.",
            "default": ""
          },
          "id": {
            "type": "string",
            "title": "id",
            "description": "Request ID.",
            "default": ""
          },
          "requestDateTime": {
            "type": "string",
            "title": "requestDateTime",
            "description": "Date and time request was made.",
            "default": ""
          },
          "startTime": {
            "type": "integer",
            "title": "startTime",
            "description": "Request start time.",
            "default": 0
          },
          "endTime": {
            "type": "integer",
            "title": "endTime",
            "description": "Request end time.",
            "default": 0
          },
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": "Number of pages in the document.",
            "default": 0
          },
          "ocrResults": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OCRResultsV2"
              }
            ],
            "title": "ocrResults",
            "description": "Model results."
          },
          "resultUrl": {
            "type": "string",
            "title": "resultURL",
            "description": "URL to the result of the OCR process.",
            "default": ""
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          }
        },
        "type": "object",
        "required": [
          "ocrVersion"
        ],
        "title": "OCRResultsResponseBodyV2",
        "x-stoplight": {
          "id": "8a8925irqsl98"
        }
      },
      "OCRResultsV1": {
        "properties": {
          "version": {
            "type": "string",
            "title": "version",
            "description": "OCR model version.",
            "default": ""
          },
          "modelVersion": {
            "type": "string",
            "title": "modelVersion",
            "description": "OCR model version date.",
            "default": ""
          },
          "readResults": {
            "items": {
              "$ref": "#/components/schemas/ReadResultV1"
            },
            "type": "array",
            "title": "readResults",
            "description": "Read results for each page in the document.",
            "default": []
          }
        },
        "type": "object",
        "title": "OCRResultsV1",
        "x-stoplight": {
          "id": "n22w4nvwkgcmu"
        }
      },
      "OCRResultsV2": {
        "properties": {
          "version": {
            "type": "string",
            "title": "version",
            "description": "OCR model version.",
            "default": ""
          },
          "modelVersion": {
            "type": "string",
            "title": "modelVersion",
            "description": "OCR model version date.",
            "default": ""
          },
          "readResults": {
            "items": {
              "$ref": "#/components/schemas/ReadResultV2"
            },
            "type": "array",
            "title": "readResults",
            "description": "Read results for each page in the document.",
            "default": []
          },
          "readStyles": {
            "items": {
              "$ref": "#/components/schemas/ReadStyleV2"
            },
            "type": "array",
            "title": "readStyles",
            "description": "Styled objects found in the document.",
            "default": []
          },
          "rawText": {
            "type": "string",
            "title": "rawText",
            "description": "All the extracted text from the document.",
            "default": ""
          }
        },
        "type": "object",
        "title": "OCRResultsV2",
        "x-stoplight": {
          "id": "dhnehgzlzwwhm"
        }
      },
      "ReadResultV1": {
        "properties": {
          "page": {
            "type": "integer",
            "title": "page",
            "description": "Page number.",
            "default": 0
          },
          "angle": {
            "type": "number",
            "title": "angle",
            "description": "Slant of text read.",
            "default": 0
          },
          "width": {
            "type": "number",
            "title": "width",
            "description": "Document width.",
            "default": 0
          },
          "height": {
            "type": "number",
            "title": "height",
            "description": "Document height.",
            "default": 0
          },
          "unit": {
            "type": "string",
            "title": "unit",
            "description": "Unit of measurement used for height and width."
          },
          "lines": {
            "items": {
              "$ref": "#/components/schemas/LineV1"
            },
            "type": "array",
            "title": "lines",
            "description": "Lines of text on the page."
          }
        },
        "type": "object",
        "title": "ReadResultV1",
        "x-stoplight": {
          "id": "ltc1n28dvxegs"
        }
      },
      "ReadResultV2": {
        "properties": {
          "pageNumber": {
            "type": "integer",
            "title": "pageNumber",
            "description": "Page number.",
            "default": 0
          },
          "angle": {
            "type": "number",
            "title": "angle",
            "description": "Slant of text read.",
            "default": 0
          },
          "width": {
            "type": "number",
            "title": "width",
            "description": "Document width.",
            "default": 0
          },
          "height": {
            "type": "number",
            "title": "height",
            "description": "Document height.",
            "default": 0
          },
          "unit": {
            "type": "string",
            "title": "unit",
            "description": "Unit of measurement used for height and width."
          },
          "lines": {
            "items": {
              "$ref": "#/components/schemas/LineV2"
            },
            "type": "array",
            "title": "lines",
            "description": "Lines of text on the page.",
            "default": []
          },
          "words": {
            "items": {
              "$ref": "#/components/schemas/WordV2"
            },
            "type": "array",
            "title": "words",
            "description": "Words on the page.",
            "default": []
          },
          "spans": {
            "items": {
              "$ref": "#/components/schemas/SpanV2"
            },
            "type": "array",
            "title": "spans",
            "description": "Span where data can be found in the raw text.",
            "default": []
          },
          "kind": {
            "type": "string",
            "title": "kind",
            "description": "Type of document.",
            "default": ""
          }
        },
        "type": "object",
        "title": "ReadResultV2",
        "x-stoplight": {
          "id": "1vg9w8flnsa29"
        }
      },
      "ReadStyleV2": {
        "properties": {
          "confidence": {
            "type": "number",
            "title": "confidence",
            "description": "Model confidence in detection and accuracy.",
            "default": 0
          },
          "spans": {
            "items": {
              "$ref": "#/components/schemas/SpanV2"
            },
            "type": "array",
            "title": "spans",
            "description": "Span where data can be found in the raw text."
          },
          "isHandwritten": {
            "type": "boolean",
            "title": "isHandwritten",
            "description": "Whether or not text was handwritten.",
            "default": false
          }
        },
        "type": "object",
        "title": "ReadStyleV2",
        "x-stoplight": {
          "id": "4h7xr7c2dxf2e"
        }
      },
      "SpanV2": {
        "properties": {
          "offset": {
            "type": "integer",
            "title": "offset",
            "description": "Offset of the data from the edge of the document.",
            "default": 0
          },
          "length": {
            "type": "integer",
            "title": "length",
            "description": "Length of area of the data.",
            "default": 0
          }
        },
        "type": "object",
        "title": "SpanV2",
        "x-stoplight": {
          "id": "3v1rzy7sniykl"
        }
      },
      "Status": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "RUNNING",
          "AUTH_FAILURE",
          "FAILURE"
        ],
        "title": "Status",
        "x-stoplight": {
          "id": "jgzssnkbq7632"
        }
      },
      "StyleV1": {
        "properties": {
          "confidence": {
            "type": "number",
            "title": "confidence",
            "description": "Model confidence in detection and accuracy.",
            "default": 0
          },
          "name": {
            "type": "string",
            "title": "name",
            "description": "Name of the style detected.",
            "default": ""
          }
        },
        "type": "object",
        "title": "StyleV1",
        "x-stoplight": {
          "id": "0dyn226kcz71x"
        }
      },
      "URLRequest": {
        "properties": {
          "inputUrl": {
            "type": "string",
            "title": "inputURL",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "default": false
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "version": {
            "type": "integer",
            "title": "version",
            "description": "OCR model version.",
            "default": 2
          }
        },
        "type": "object",
        "title": "URLRequest",
        "description": "/forms/ocr request body with URL file upload",
        "required": [
          "inputUrl"
        ],
        "x-stoplight": {
          "id": "x44wl56zj4bsn"
        }
      },
      "WordV1": {
        "properties": {
          "boundingBox": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "boundingBox",
            "description": "Bounding box coordinates of content.",
            "default": []
          },
          "confidence": {
            "type": "number",
            "title": "confidence",
            "description": "Model confidence in detection and accuracy.",
            "default": 0
          },
          "text": {
            "type": "string",
            "title": "text",
            "description": "Content of the field as a string.",
            "default": ""
          }
        },
        "type": "object",
        "title": "WordV1",
        "x-stoplight": {
          "id": "51m7p6xmx7xi3"
        }
      },
      "WordV2": {
        "properties": {
          "content": {
            "type": "string",
            "title": "content",
            "description": "Content of the field as a string.",
            "default": ""
          },
          "polygon": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "polygon",
            "description": "Bounding box coordinates of content.",
            "default": []
          },
          "confidence": {
            "type": "number",
            "title": "confidence",
            "description": "Model confidence in detection and accuracy.",
            "default": 0
          },
          "span": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SpanV2"
              }
            ],
            "title": "span",
            "description": "Span where data can be found in the raw text."
          }
        },
        "type": "object",
        "title": "WordV2",
        "x-stoplight": {
          "id": "nthw2c5k1ruq3"
        }
      },
      "ZipBase64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "base64",
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "default": false
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "version": {
            "type": "integer",
            "title": "version",
            "description": "OCR model version.",
            "default": 2
          }
        },
        "type": "object",
        "title": "ZipBase64Request",
        "description": "/forms/ocr/zip request body with base64 file upload",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "qx6rac0ybzcjv"
        }
      },
      "ZipURLRequest": {
        "properties": {
          "inputUrl": {
            "type": "string",
            "title": "inputURL",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "default": false
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "version": {
            "type": "integer",
            "title": "version",
            "description": "OCR model version.",
            "default": 2
          }
        },
        "type": "object",
        "title": "ZipURLRequest",
        "description": "/forms/ocr/zip request body with URL file upload",
        "required": [
          "inputUrl"
        ],
        "x-stoplight": {
          "id": "71ctybkv44d7q"
        }
      }
    },
    "parameters": {
      "orgId": {
        "name": "orgId",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "title": "orgId",
          "description": "Organization ID"
        },
        "description": "Organization ID"
      },
      "authKey": {
        "name": "authKey",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "title": "authKey",
          "description": "Authentication Key"
        },
        "description": "Authentication Key"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request or failure to read. Request was invalid or we could not process your data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized attempt. There was an issue with your credentials, model permissions or billing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Invalid credentials": {
                "value": {
                  "status": "AUTH_FAILURE",
                  "message": "Invalid authentication"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error. When a request references an invalid endpoint or resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Model id 'abc' is not valid."
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Model processing failed. Extraction model or LLM could not process your request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "OCR failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "Error during request to OCR microservice."
                }
              },
              "LLM failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "We made three attempts to process the model with no success."
                }
              }
            }
          }
        }
      },
      "502": {
        "description": "Could not connect to model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request to the model failed."
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.lazarusforms.com/api/forms",
      "description": ""
    }
  ]
}