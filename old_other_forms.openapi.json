{
  "openapi": "3.1.0",
  "info": {
    "title": "Specialized Forms Models",
    "version": "",
    "summary": "",
    "description": "",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusforms.com"
    },
    "termsOfService": "https://www.lazarusforms.com/legal"
  },
  "paths": {
    "/forms/ssn": {
      "post": {
        "summary": "JSON response",
        "description": "Upload a social security card to extract SSN data. Receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_ssn",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FormsURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FormsBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormsFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSNResponseBody"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-stoplight": {
          "id": "rq5imurlfp4n7"
        },
        "tags": [
          "SSN"
        ]
      }
    },
    "/forms/ssn/zip": {
      "post": {
        "summary": "Zip file response",
        "description": "Upload a social security card to extract SSN data and receive response data in a ZIP file.\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if `fileId` field is not included in the request.",
        "operationId": "post_ssn_zip",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FormsZipURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FormsZipBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormsZipFileRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/zip": {
                "schema": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-stoplight": {
          "id": "2ckyszw04ptv8"
        },
        "tags": [
          "SSN"
        ]
      }
    },
    "/forms/invoices": {
      "post": {
        "summary": "JSON response",
        "description": "**TODO: where is version parameter to change to V2?**\\\nUpload an invoice for data extraction and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_invoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FormsURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FormsBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormsFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicesResponseBody"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-stoplight": {
          "id": "06qrxg7z7uimq"
        },
        "tags": [
          "Invoices"
        ]
      }
    },
    "/forms/invoices/zip": {
      "post": {
        "summary": "Zip file response",
        "description": "Upload an invoice for data extraction and receive response data in a ZIP file.\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if `fileId` field is not included in the request.",
        "operationId": "post_invoices_zip",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FormsZipURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FormsZipBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormsZipFileRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/zip": {
                "schema": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-stoplight": {
          "id": "gtfe1hcallw5c"
        },
        "tags": [
          "Invoices"
        ]
      }
    },
    "/forms/receipts": {
      "post": {
        "summary": "JSON response",
        "description": "Upload a receipt for data extraction and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_forms_receipts",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FormsURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FormsBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormsFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReceiptsResponseBody"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-stoplight": {
          "id": "use70zud0bs36"
        },
        "tags": [
          "Receipts"
        ]
      }
    },
    "/forms/receipts/zip": {
      "post": {
        "summary": "Post Receipts Zip",
        "description": "Upload a receipt for data extraction and receive response data in a ZIP file.\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if `fileId` field is not included in the request.",
        "operationId": "post_receipts_zip_forms_receipts_zip__input_type__post",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/FormsURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/FormsBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FormsFileRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/zip": {
                "schema": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-stoplight": {
          "id": "n1xkphuqg0b1c"
        },
        "tags": [
          "Receipts"
        ]
      }
    },
    "/forms/pii": {
      "post": {
        "summary": "Extract, JSON response",
        "description": "Make a request to extract PII data and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_pii",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PIIURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/PIIBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PIIFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PIIResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "cx82user3yp4q"
        },
        "tags": [
          "PII"
        ]
      }
    },
    "/forms/pii/redact": {
      "post": {
        "summary": "Redact, JSON response",
        "description": "Make a request to redact PII data from a document and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_pii_redact",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RedactURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RedactBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RedactFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedactResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "y3kpomz0qhx19"
        },
        "tags": [
          "PII"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BoundingRegion": {
        "properties": {
          "boundingBox": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "boundingBox",
            "description": "",
            "default": []
          },
          "pageNumber": {
            "type": "integer",
            "title": "pageNumber",
            "description": "",
            "default": 0
          }
        },
        "type": "object",
        "title": "BoundingRegion",
        "x-stoplight": {
          "id": "vrbljsk4vri8o"
        }
      },
      "FormsBase64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "base64",
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "webhookSendFull",
            "description": "Set to true to send all response data to webhook upon request completion, otherwise only send request status."
          },
          "outputUrl": {
            "type": "string",
            "title": "outputURL",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputUrlHeaders": {
            "type": "object",
            "title": "outputURLHeaders",
            "description": "Request headers to include in the PUT request to the output URL."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model."
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf."
          }
        },
        "type": "object",
        "title": "FormsBase64Request",
        "description": "Forms Request Body with base64 file upload",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "lnk5lvu71kl75"
        }
      },
      "FormsFileRequest": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "file",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "webhookSendFull",
            "description": "Set to true to send all response data to webhook upon request completion, otherwise only send request status."
          },
          "outputUrl": {
            "type": "string",
            "title": "outputURL",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model."
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf."
          }
        },
        "type": "object",
        "title": "FormsFileRequest",
        "description": "Forms Request Body with local file upload",
        "required": [
          "file"
        ],
        "x-stoplight": {
          "id": "wgnzga8chwvcb"
        }
      },
      "FormsURLRequest": {
        "properties": {
          "inputUrl": {
            "type": "string",
            "title": "inputURL",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "webhookSendFull",
            "description": "Set to true to send all response data to webhook upon request completion, otherwise only send request status."
          },
          "outputUrl": {
            "type": "string",
            "title": "outputURL",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputUrlHeaders": {
            "type": "object",
            "title": "outputURLHeaders",
            "description": "Request headers to include in the PUT request to the output URL."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model."
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf."
          }
        },
        "type": "object",
        "title": "FormsURLRequest",
        "description": "Forms Request Body with URL file upload",
        "required": [
          "inputUrl"
        ],
        "x-stoplight": {
          "id": "bw7dhbupt8hkd"
        }
      },
      "FormsZipBase64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "title": "base64",
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "outputUrl": {
            "type": "string",
            "title": "outputURL",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputUrlHeaders": {
            "type": "object",
            "title": "outputURLHeaders",
            "description": "Request headers to include in the PUT request to the output URL."
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model."
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf."
          },
          "statusId": {
            "type": "string",
            "title": "statusId",
            "description": "WARNING: Deprecating in favor of 'fileId'. Custom ID for document. If not present, will default to file name."
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "webhookSendFull",
            "description": "Set to true to send all response data to webhook upon request completion, otherwise only send request status."
          }
        },
        "type": "object",
        "title": "FormsZipBase64Request",
        "description": "Forms ZIP Request Nody with base64 file upload",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "3m925ntvrzjl9"
        }
      },
      "FormsZipFileRequest": {
        "properties": {
          "outputUrl": {
            "type": "string",
            "title": "outputURL",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "file": {
            "type": "string",
            "format": "binary",
            "title": "file",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model."
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf."
          },
          "statusId": {
            "type": "string",
            "title": "statusId",
            "description": "WARNING: Deprecating in favor of 'fileId'. Custom ID for document. If not present, will default to file name."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "webhookSendFull",
            "description": "Set to true to send all response data to webhook upon request completion, otherwise only send request status."
          }
        },
        "type": "object",
        "title": "FormsZipFileRequest",
        "description": "Forms ZIP Request Nody with local file upload",
        "required": [
          "file"
        ],
        "x-stoplight": {
          "id": "a4e7muj9tv9ny"
        }
      },
      "FormsZipURLRequest": {
        "properties": {
          "inputUrl": {
            "type": "string",
            "title": "inputURL",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "outputUrl": {
            "type": "string",
            "title": "outputURL",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputUrlHeaders": {
            "type": "object",
            "title": "outputURLHeaders",
            "description": "Request headers to include in the PUT request to the output URL."
          },
          "fileId": {
            "type": "string",
            "title": "fileId",
            "description": "Custom ID for document. If not present, will default to file name."
          },
          "forceBase64": {
            "type": "boolean",
            "title": "forceBase64",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model."
          },
          "forceOCR": {
            "type": "boolean",
            "title": "forceOCR",
            "description": "Set this parameter to true if the input file is a fillable pdf."
          },
          "statusId": {
            "type": "string",
            "title": "statusId",
            "description": "WARNING: Deprecating in favor of 'fileId'. Custom ID for document. If not present, will default to file name."
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": "Custom JSON to be included in the returned response."
          },
          "webhook": {
            "type": "string",
            "title": "webhook",
            "description": "Webhook to ping after API runs."
          },
          "webhookSendFull": {
            "type": "boolean",
            "title": "webhookSendFull",
            "description": "Set to true to send all response data to webhook upon request completion, otherwise only send request status."
          }
        },
        "type": "object",
        "title": "FormsZipURLRequest",
        "description": "Forms ZIP Request Nody with URL file upload",
        "required": [
          "inputUrl"
        ],
        "x-stoplight": {
          "id": "a5wql4puojrsb"
        }
      },
      "InvoiceData": {
        "properties": {
          "amount_due": {
            "type": "string",
            "title": "amountDue",
            "description": "",
            "default": ""
          },
          "customer_address": {
            "type": "string",
            "title": "customerAddress",
            "description": ""
          },
          "customer_address_recipient": {
            "type": "string",
            "title": "customerAddressRecipient",
            "description": ""
          },
          "customer_name": {
            "type": "string",
            "title": "customerName",
            "description": ""
          },
          "due_date": {
            "type": "string",
            "title": "dueDate",
            "description": ""
          },
          "invoice_date": {
            "type": "string",
            "title": "invoiceDate",
            "description": ""
          },
          "invoice_id": {
            "type": "string",
            "title": "invoiceId",
            "description": ""
          },
          "invoice_total": {
            "type": "string",
            "title": "invoiceTotal",
            "description": ""
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "title": "items",
            "description": "",
            "default": []
          },
          "keyValuePairs": {
            "items": {
              "$ref": "#/components/schemas/KeyValuePair"
            },
            "type": "array",
            "title": "keyValuePair",
            "description": "",
            "default": []
          },
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": "",
            "default": 0
          },
          "rawText": {
            "type": "string",
            "title": "rawText",
            "description": ""
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessStatus"
              }
            ],
            "title": "status",
            "description": "",
            "default": "FAILURE"
          },
          "sub_total": {
            "type": "string",
            "title": "subTotal",
            "description": "",
            "default": ""
          },
          "total_tax": {
            "type": "string",
            "title": "totalTax",
            "description": ""
          },
          "vendor_address": {
            "type": "string",
            "title": "vendorAddress",
            "description": ""
          },
          "vendor_address_recipient": {
            "type": "string",
            "title": "vendorAddressRecipient",
            "description": ""
          },
          "vendor_name": {
            "type": "string",
            "title": "vendorName",
            "description": ""
          }
        },
        "type": "object",
        "title": "InvoiceData",
        "x-stoplight": {
          "id": "8emehhlqj487a"
        }
      },
      "InvoicesResponseBody": {
        "properties": {
          "documentId": {
            "type": "string",
            "title": "documentId",
            "description": ""
          },
          "endTime": {
            "type": "integer",
            "title": "endTime",
            "description": ""
          },
          "id": {
            "type": "string",
            "title": "id",
            "description": ""
          },
          "invoiceData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceData"
              }
            ],
            "title": "invoiceData",
            "description": ""
          },
          "pages": {
            "type": "integer",
            "title": "invoiceData",
            "description": ""
          },
          "startTime": {
            "type": "integer",
            "title": "startTime",
            "description": ""
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessStatus"
              }
            ],
            "title": "status",
            "description": "",
            "default": "FAILURE"
          }
        },
        "type": "object",
        "title": "InvoicesResponseBody",
        "x-stoplight": {
          "id": "f7st4yuzv0bu0"
        }
      },
      "Item": {
        "properties": {
          "amount": {
            "type": "string",
            "title": "amount",
            "description": ""
          },
          "description": {
            "type": "string",
            "title": "description",
            "description": ""
          },
          "product_code": {
            "type": "string",
            "title": "product_code",
            "description": ""
          },
          "rawText": {
            "type": "string",
            "title": "rawText",
            "description": "",
            "default": ""
          }
        },
        "type": "object",
        "title": "Item",
        "x-stoplight": {
          "id": "azne8jchihutk"
        }
      },
      "ItemData": {
        "properties": {
          "price": {
            "type": "string",
            "title": "price",
            "description": "",
            "default": ""
          },
          "quantity": {
            "type": "string",
            "title": "quantity",
            "description": "",
            "default": ""
          },
          "total_price": {
            "type": "string",
            "title": "totalPrice",
            "description": "",
            "default": ""
          }
        },
        "type": "object",
        "title": "ItemData",
        "x-stoplight": {
          "id": "1oxvnpnm2i4d1"
        }
      },
      "KVPEntity": {
        "properties": {
          "boundingRegions": {
            "items": {
              "$ref": "#/components/schemas/BoundingRegion"
            },
            "type": "array",
            "title": "boundingRegion",
            "description": "",
            "default": []
          },
          "content": {
            "type": "string",
            "title": "content",
            "description": "",
            "default": ""
          },
          "spans": {
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "type": "array",
            "title": "spans",
            "description": "",
            "default": []
          }
        },
        "type": "object",
        "title": "KVPEntity",
        "x-stoplight": {
          "id": "ggef8rudgk907"
        }
      },
      "KeyValuePair": {
        "properties": {
          "confidence": {
            "type": "number",
            "title": "confidence",
            "description": "",
            "default": 0
          },
          "key": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KVPEntity"
              }
            ],
            "title": "key",
            "description": ""
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/KVPEntity"
              }
            ],
            "title": "value",
            "description": ""
          }
        },
        "type": "object",
        "title": "KeyValuePair",
        "x-stoplight": {
          "id": "144vv9p65ujva"
        }
      },
      "Receipt": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/ItemData"
            },
            "type": "array",
            "title": "items",
            "description": "",
            "default": []
          },
          "total": {
            "type": "number",
            "title": "total",
            "description": "",
            "default": 0
          },
          "transaction_date": {
            "type": "string",
            "title": "transactionDate",
            "description": ""
          }
        },
        "type": "object",
        "title": "Receipt",
        "x-stoplight": {
          "id": "nc51zm9ac2t1j"
        }
      },
      "ReceiptData": {
        "properties": {
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": "",
            "default": 0
          },
          "receipts": {
            "items": {
              "$ref": "#/components/schemas/Receipt"
            },
            "type": "array",
            "title": "receipts",
            "description": "",
            "default": []
          }
        },
        "type": "object",
        "title": "ReceiptData",
        "x-stoplight": {
          "id": "gg8dwi3ybnwyw"
        }
      },
      "ReceiptsResponseBody": {
        "properties": {
          "documentId": {
            "type": "string",
            "title": "documentId",
            "description": ""
          },
          "startTime": {
            "type": "integer",
            "title": "startTime",
            "description": ""
          },
          "endTime": {
            "type": "integer",
            "title": "endTime",
            "description": ""
          },
          "id": {
            "type": "string",
            "title": "id",
            "description": "",
            "default": ""
          },
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": ""
          },
          "receiptData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceiptData"
              }
            ],
            "title": "receiptData",
            "description": ""
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SuccessStatus"
              }
            ],
            "title": "status",
            "description": "",
            "default": "FAILURE"
          }
        },
        "type": "object",
        "title": "ReceiptsResponseBody",
        "x-stoplight": {
          "id": "hzdu8k1ou3qll"
        }
      },
      "SSNData": {
        "properties": {
          "ssnNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SSNNumber"
              }
            ],
            "title": "ssnNumber",
            "description": ""
          }
        },
        "type": "object",
        "title": "SSNData",
        "x-stoplight": {
          "id": "cs3my1t9n3mkc"
        }
      },
      "SSNNumber": {
        "properties": {
          "index": {
            "type": "string",
            "title": "index",
            "description": ""
          }
        },
        "type": "object",
        "title": "SSNNumber",
        "x-stoplight": {
          "id": "3p18rbb6b4xx3"
        }
      },
      "SSNResponseBody": {
        "properties": {
          "documentId": {
            "type": "string",
            "title": "documentId",
            "description": ""
          },
          "metadata": {
            "type": "object",
            "title": "metadata",
            "description": ""
          },
          "ssnData": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SSNData"
              }
            ],
            "title": "ssnData",
            "description": ""
          },
          "status": {
            "type": "string",
            "title": "status",
            "description": ""
          },
          "startTime": {
            "type": "integer",
            "title": "startTime",
            "description": ""
          },
          "endTime": {
            "type": "integer",
            "title": "endTime",
            "description": ""
          },
          "id": {
            "type": "string",
            "title": "id",
            "description": ""
          },
          "pages": {
            "type": "integer",
            "title": "pages",
            "description": ""
          }
        },
        "type": "object",
        "title": "SSNResponseBody",
        "x-stoplight": {
          "id": "m7fwk1t6ftvpl"
        }
      },
      "Span": {
        "properties": {
          "offset": {
            "type": "integer",
            "title": "offset",
            "description": "",
            "default": 0
          },
          "length": {
            "type": "integer",
            "title": "length",
            "description": "",
            "default": 0
          }
        },
        "type": "object",
        "title": "Span",
        "x-stoplight": {
          "id": "rwnraql5uwl8c"
        }
      },
      "SuccessStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE"
        ],
        "title": "SuccessStatus",
        "x-stoplight": {
          "id": "3m7hwlpmextrb"
        }
      },
      "ContentRegion": {
        "properties": {
          "polygon": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "polygon",
            "description": "Bounding box coordinates of content."
          },
          "content": {
            "type": "string",
            "title": "content",
            "description": "Detected text."
          },
          "confidence": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "confidence",
            "description": "Confidence score."
          }
        },
        "type": "object",
        "required": [
          "polygon"
        ],
        "title": "ContentRegion",
        "description": "Holds a region on a page and an optional content and confidence within",
        "x-stoplight": {
          "id": "ztjto4lr2qphv"
        }
      },
      "ErrorMessage": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ErrorMessage",
        "description": "Response when an error occurs.",
        "x-stoplight": {
          "id": "fpwcr8ta3rguq"
        }
      },
      "PIIBase64Request": {
        "properties": {
          "base64": {
            "type": "string",
            "title": "base64",
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "pageQualityWeight",
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5
          },
          "redact": {
            "type": "boolean",
            "title": "redact",
            "description": "Set to true to include the redacted file in the response as a base64-encoded PDF.",
            "default": false
          }
        },
        "type": "object",
        "title": "PIIBase64Request",
        "description": "Validates that all fields are specified as required with base64 file upload",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "4yt0kaybysvjb"
        }
      },
      "PIIFileRequest": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "file",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "pageQualityWeight",
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5
          },
          "redact": {
            "type": "boolean",
            "title": "redact",
            "description": "Set to true to include the redacted file in the response as a base64-encoded PDF.",
            "default": false
          }
        },
        "type": "object",
        "title": "PIIFileRequest",
        "description": "Validates that all fields are specified as required with local file upload",
        "required": [
          "file"
        ],
        "x-stoplight": {
          "id": "c0ogiy283ns7j"
        }
      },
      "PIIURLRequest": {
        "properties": {
          "inputURL": {
            "type": "string",
            "title": "Inputurl",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "pageQualityWeight",
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5
          },
          "redact": {
            "type": "boolean",
            "title": "redact",
            "description": "Set to true to include the redacted file in the response as a base64-encoded PDF.",
            "default": false
          }
        },
        "type": "object",
        "title": "PIIURLRequest",
        "description": "Validates that all fields are specified as required with URL file upload",
        "required": [
          "inputURL"
        ],
        "x-stoplight": {
          "id": "58tk6grjj46ap"
        }
      },
      "PIIResult": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PageContent"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of personally-identifiable information by page."
          },
          "redactedFile": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RedactedFile"
              },
              {
                "type": "null"
              }
            ],
            "title": "redactedFile",
            "description": "The encoded redacted PDF file."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "PIIResult",
        "description": "Model to return to /pii requests",
        "x-stoplight": {
          "id": "metummrl61g64"
        }
      },
      "PageContent": {
        "properties": {
          "dimension": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageDimension"
              }
            ],
            "title": "dimension",
            "description": "Width, height, and units of the given page."
          },
          "regions": {
            "items": {
              "anyOf": [
                {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                {
                  "$ref": "#/components/schemas/ContentRegion"
                }
              ]
            },
            "type": "array",
            "title": "regions",
            "description": "List of bounding boxes or content regions."
          }
        },
        "type": "object",
        "required": [
          "dimension",
          "regions"
        ],
        "title": "PageContent",
        "description": "Holds page dimensions and bounding boxes by page",
        "x-stoplight": {
          "id": "5ma5bo6jy1yl6"
        }
      },
      "PageDimension": {
        "properties": {
          "height": {
            "type": "number",
            "exclusiveMinimum": 0,
            "title": "height",
            "description": "Document height."
          },
          "width": {
            "type": "number",
            "exclusiveMinimum": 0,
            "title": "width",
            "description": "Document width."
          },
          "unit": {
            "type": "string",
            "title": "unit",
            "description": "Unit of measurement used for height and width.",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "height",
          "width"
        ],
        "title": "PageDimension",
        "description": "Holds dimension of a page",
        "x-stoplight": {
          "id": "dby97qi74q8go"
        }
      },
      "RedactBase64Request": {
        "properties": {
          "base64": {
            "type": "string",
            "title": "base64",
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "getPII": {
            "type": "boolean",
            "title": "getPII",
            "description": "Set to true to run the PII model first and redact any identified regions."
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "pageQualityWeight",
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "keywords",
            "description": "Labels of fields to redact."
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/PageContent"
            },
            "type": "array",
            "title": "pages",
            "description": "List of page content to redact regions to redact. Can directly insert results from /pii response field \"items\" or custom regions and dimensions."
          }
        },
        "type": "object",
        "title": "RedactBase64Request",
        "description": "Validates that all fields are specified as required with base64 file upload",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "1kwxsf60ldayk"
        }
      },
      "RedactFileRequest": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "file",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "getPII": {
            "type": "boolean",
            "title": "getPII",
            "description": "Set to true to run the PII model first and redact any identified regions."
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "pageQualityWeight",
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "keywords",
            "description": "Labels of fields to redact."
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/PageContent"
            },
            "type": "array",
            "title": "pages",
            "description": "List of page content to redact regions to redact. Can directly insert results from /pii response field \"items\" or custom regions and dimensions."
          }
        },
        "type": "object",
        "title": "RedactFileRequest",
        "description": "Validates that all fields are specified as required with local file upload",
        "required": [
          "file"
        ],
        "x-stoplight": {
          "id": "qtxehnarsjqwa"
        }
      },
      "RedactURLRequest": {
        "properties": {
          "inputURL": {
            "type": "string",
            "title": "Inputurl",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, or TIFF.",
            "forceRequire": true
          },
          "getPII": {
            "type": "boolean",
            "title": "getPII",
            "description": "Set to true to run the PII model first and redact any identified regions."
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "title": "pageQualityWeight",
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "keywords",
            "description": "Labels of fields to redact."
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/PageContent"
            },
            "type": "array",
            "title": "pages",
            "description": "List of page content to redact regions to redact. Can directly insert results from /pii response field \"items\" or custom regions and dimensions."
          }
        },
        "type": "object",
        "title": "RedactURLRequest",
        "description": "Validates that all fields are specified as required with URL file upload",
        "required": [
          "inputURL"
        ],
        "x-stoplight": {
          "id": "p541curor8kvn"
        }
      },
      "RedactResult": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "redactedFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedactedFile"
              }
            ],
            "title": "redactedFile",
            "description": "The encoded redacted PDF file."
          }
        },
        "type": "object",
        "title": "RedactResult",
        "description": "Model to return to /redact requests",
        "x-stoplight": {
          "id": "i87smbylu0zfh"
        }
      },
      "RedactedFile": {
        "properties": {
          "data": {
            "type": "string",
            "format": "binary",
            "title": "bytes",
            "description": "Redacted and encoded file data."
          },
          "encoding": {
            "type": "string",
            "title": "encoding",
            "description": "File encoding."
          }
        },
        "type": "object",
        "required": [
          "data",
          "encoding"
        ],
        "title": "RedactedFile",
        "description": "Holds redacted file data",
        "x-stoplight": {
          "id": "9q7p9x0pz21yp"
        }
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "AUTH_FAILURE"
        ],
        "title": "StatusEnum",
        "x-stoplight": {
          "id": "mh1f1rbl65hl4"
        }
      }
    },
    "parameters": {
      "apiVersion": {
        "name": "apiVersion",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "YYYY-MM-DD",
          "title": "apiVersion",
          "description": "API Version",
          "default": "2025-02-27"
        },
        "description": "API Version"
      },
      "orgId": {
        "name": "orgId",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "title": "orgId",
          "description": "Organization ID"
        },
        "description": "Organization ID"
      },
      "authKey": {
        "name": "authKey",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "title": "authKey",
          "description": "Authentication Key"
        },
        "description": "Authentication Key"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request or failure to read. Request was invalid or we could not process your data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized attempt. There was an issue with your credentials, model permissions or billing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Invalid credentials": {
                "value": {
                  "status": "AUTH_FAILURE",
                  "message": "Invalid authentication"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error. When a request references an invalid endpoint or resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Model id 'abc' is not valid."
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Model processing failed. Extraction model or LLM could not process your request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "OCR failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "Error during request to OCR microservice."
                }
              },
              "LLM failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "We made three attempts to process the model with no success."
                }
              }
            }
          }
        }
      },
      "502": {
        "description": "Could not connect to model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request to the model failed."
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.lazarusforms.com/api",
      "description": ""
    }
  ],
  "tags": [
    {
      "name": "Invoices",
      "description": "Extract invoice data"
    },
    {
      "name": "PII",
      "description": "Extract and redact personally identifiable information"
    },
    {
      "name": "Receipts",
      "description": "Extract receipt data"
    },
    {
      "name": "SSN",
      "description": "Extract social security numbers"
    }
  ]
}