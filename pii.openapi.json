{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "cwxndbu4lr5tz"
  },
  "info": {
    "title": "PII",
    "version": "",
    "summary": "",
    "description": "Extract and redact personally identifiable information",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusai.com"
    },
    "termsOfService": "https://www.lazarusai.com/legal"
  },
  "paths": {
    "/forms/pii": {
      "post": {
        "summary": "Extract, JSON response",
        "description": "Make a request to extract PII data and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_pii",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/PIIURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/PIIBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PIIFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PIIResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "522": {
            "$ref": "#/components/responses/522"
          }
        },
        "x-stoplight": {
          "id": "3f1p1gdaz39wk"
        },
        "servers": [
          {
            "url": "https://api.lazarusai.com/api",
            "description": ""
          }
        ]
      }
    },
    "/forms/pii/redact": {
      "post": {
        "summary": "Redact, JSON response",
        "description": "Make a request to redact PII data from a document and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `multipart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_pii_redact",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersion"
          },
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RedactURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RedactBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RedactFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RedactResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          },
          "522": {
            "$ref": "#/components/responses/522"
          }
        },
        "x-stoplight": {
          "id": "v9ernc822es8s"
        },
        "servers": [
          {
            "url": "https://api.lazarusai.com/api",
            "description": ""
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "InputOutputSFTP": {
        "properties": {
          "inputURL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              }
            ],
            "description": "SFTP server authentication info for the `inputURL`."
          },
          "outputURL": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              }
            ],
            "description": "SFTP server authentication info for the `outputURL`."
          }
        },
        "type": "object",
        "title": "InputOutputSFTP",
        "required": []
      },
      "SFTP": {
        "properties": {
          "user": {
            "type": "string",
            "description": "SFTP username."
          },
          "password": {
            "type": "string",
            "description": "SFTP password. Either `password` or `privateKey` are required."
          },
          "privateKey": {
            "type": "string",
            "description": "Base64 encoded SFTP private key. Either `password` or `privateKey` are required."
          },
          "privateKeyPassphrase": {
            "type": "string",
            "description": "Optional passphrase to use if private key is protected."
          }
        },
        "type": "object",
        "required": [
          "user"
        ],
        "title": "SFTP"
      },
      "ContentRegion": {
        "properties": {
          "polygon": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "description": "Bounding box coordinates of content."
          },
          "content": {
            "type": "string",
            "description": "Detected text."
          },
          "confidence": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Confidence score."
          }
        },
        "type": "object",
        "required": [
          "polygon"
        ],
        "title": "ContentRegion",
        "x-stoplight": {
          "id": "ivi57lpw7ei5f"
        }
      },
      "ErrorMessage": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ErrorMessage",
        "description": "Response when an error occurs.",
        "x-stoplight": {
          "id": "uii1uj39tnp42"
        }
      },
      "PIIBase64Request": {
        "properties": {
          "base64": {
            "type": "string",
            "minLength": 1,
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "default": false
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5,
            "format": "float"
          },
          "redact": {
            "type": "boolean",
            "description": "Set to true to include the redacted file in the response as a base64-encoded PDF.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "staticIP": {
            "type": "boolean",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "default": false
          }
        },
        "type": "object",
        "title": "PIIBase64Request",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "31o25qyxeqge4"
        }
      },
      "PIIFileRequest": {
        "type": "object",
        "title": "PIIFileRequest",
        "x-stoplight": {
          "id": "qjn5ay7bahh9r"
        },
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TXT. Note that TIFF files are currently unsupported for PII."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
            "default": false
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5,
            "format": "float"
          },
          "redact": {
            "type": "boolean",
            "description": "Set to true to include the redacted file in the response as a base64-encoded PDF.",
            "default": false
          }
        }
      },
      "PIIURLRequest": {
        "type": "object",
        "title": "PIIURLRequest",
        "x-stoplight": {
          "id": "9nbt9g6u3fy5a"
        },
        "required": [
          "inputURL"
        ],
        "properties": {
          "inputURL": {
            "type": "string",
            "minLength": 1,
            "pattern": " https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TXT. Note that TIFF files are currently unsupported for PII."
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5,
            "format": "float"
          },
          "redact": {
            "type": "boolean",
            "description": "Set to true to include the redacted file in the response as a base64-encoded PDF.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "staticIP": {
            "type": "boolean",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "default": false
          }
        }
      },
      "PIIResult": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PageContent"
            },
            "type": "array",
            "title": "Items",
            "description": "A list of personally-identifiable information by page."
          },
          "redactedFile": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RedactedFile"
              },
              {
                "type": "null"
              }
            ],
            "title": "redactedFile",
            "description": "The b64 encoded PDF file with PII redacted."
          },
          "ocrResults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request."
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "PIIResult",
        "description": "Model to return to /pii requests",
        "x-stoplight": {
          "id": "dyqhc1tljy2za"
        }
      },
      "PageContent": {
        "properties": {
          "dimension": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageDimension"
              }
            ],
            "description": "Width, height, and units of the given page."
          },
          "regions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ContentRegion"
                },
                "type": "array"
              },
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              }
            ],
            "description": "List of bounding boxes or content regions."
          }
        },
        "type": "object",
        "required": [
          "dimension",
          "regions"
        ],
        "title": "PageContent",
        "x-stoplight": {
          "id": "ov6ocef3die0y"
        }
      },
      "PageDimension": {
        "properties": {
          "height": {
            "type": "number",
            "exclusiveMinimum": 0,
            "description": "Document height."
          },
          "width": {
            "type": "number",
            "exclusiveMinimum": 0,
            "description": "Document width."
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement used for height and width."
          }
        },
        "type": "object",
        "required": [
          "height",
          "width"
        ],
        "title": "PageDimension",
        "x-stoplight": {
          "id": "klat0sx1s7ntt"
        }
      },
      "RedactBase64Request": {
        "properties": {
          "base64": {
            "type": "string",
            "minLength": 1,
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "default": false
          },
          "getPII": {
            "type": "boolean",
            "description": "Set to true to run the PII model first and redact any identified regions."
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5,
            "format": "float"
          },
          "keywords": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Labels of fields to redact."
          },
          "pages": {
            "items": {
              "$ref": "#/components/schemas/PageContent"
            },
            "type": "array",
            "description": "List of page content to redact regions to redact. Can directly insert results from /pii response field \"items\" or custom regions and dimensions."
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "staticIP": {
            "type": "boolean",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "default": false
          }
        },
        "type": "object",
        "title": "RedactBase64Request",
        "required": [
          "base64"
        ],
        "x-stoplight": {
          "id": "z52f06xa9h5po"
        }
      },
      "RedactFileRequest": {
        "type": "object",
        "title": "RedactFileRequest",
        "x-stoplight": {
          "id": "uo4hxvqqq7zkc"
        },
        "required": [
          "file"
        ],
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File to upload: Must be a PDF, JPEG, PNG, or TXT. Note that TIFF files are currently unsupported for PII.",
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`. WARNING: RikAI2-Extract endpoint does not support returnOCR.",
            "default": false
          },
          "getPII": {
            "type": "boolean",
            "description": "Set to true to run the PII model first and redact any identified regions."
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5,
            "format": "float"
          },
          "keywords": {
            "type": "array",
            "description": "Labels of fields to redact.",
            "items": {
              "type": "string"
            }
          },
          "pages": {
            "type": "array",
            "description": "List of page content to redact regions to redact. Can directly insert results from /pii response field \"items\" or custom regions and dimensions.",
            "items": {
              "$ref": "#/components/schemas/PageContent"
            }
          }
        }
      },
      "RedactURLRequest": {
        "type": "object",
        "title": "RedactURLRequest",
        "x-stoplight": {
          "id": "sov6x9uit7ri4"
        },
        "required": [
          "inputURL"
        ],
        "properties": {
          "inputURL": {
            "type": "string",
            "minLength": 1,
            "pattern": " https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, TIFF, or TXT. Note that TIFF files are currently unsupported for PII."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "default": false
          },
          "getPII": {
            "type": "boolean",
            "description": "Set to true to run the PII model first and redact any identified regions."
          },
          "pageQualityWeight": {
            "type": "number",
            "maximum": 1,
            "minimum": 0,
            "description": "Hyperparameter to weigh word confidences against confidence that a given word is PII.",
            "default": 0.5,
            "format": "float"
          },
          "keywords": {
            "type": "array",
            "description": "Labels of fields to redact.",
            "items": {
              "type": "string"
            }
          },
          "pages": {
            "type": "array",
            "description": "List of page content to redact regions to redact. Can directly insert results from /pii response field \"items\" or custom regions and dimensions.",
            "items": {
              "$ref": "#/components/schemas/PageContent"
            }
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "staticIP": {
            "type": "boolean",
            "description": "Set to `true` for static IP for webhook and outputURL if they exist",
            "default": false
          }
        }
      },
      "RedactResult": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "redactedFile": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RedactedFile"
              }
            ],
            "title": "redactedFile",
            "description": "The encoded redacted PDF file."
          },
          "ocrResults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request."
          }
        },
        "type": "object",
        "title": "RedactResult",
        "description": "Model to return to /redact requests",
        "x-stoplight": {
          "id": "gn2t02wje0vl9"
        }
      },
      "RedactedFile": {
        "properties": {
          "data": {
            "type": "string",
            "format": "binary",
            "description": "Redacted and encoded file data."
          },
          "encoding": {
            "type": "string",
            "description": "File encoding."
          }
        },
        "type": "object",
        "required": [
          "data",
          "encoding"
        ],
        "title": "RedactedFile",
        "x-stoplight": {
          "id": "tx0hef30q015l"
        }
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "AUTH_FAILURE"
        ],
        "title": "StatusEnum",
        "x-stoplight": {
          "id": "wta4kqf2pz3ax"
        }
      }
    },
    "parameters": {
      "apiVersion": {
        "name": "apiVersion",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "YYYY-MM-DD",
          "title": "apiVersion",
          "description": "API Version",
          "default": "2025-02-27"
        },
        "description": "API Version"
      },
      "orgId": {
        "name": "orgId",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "orgId",
          "description": "Organization ID"
        },
        "description": "Organization ID"
      },
      "authKey": {
        "name": "authKey",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "authKey",
          "description": "Authentication key"
        },
        "description": "Authentication key"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request or failure to read. Request was invalid or we could not process your data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized attempt. There was an issue with your credentials, model permissions or billing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Invalid credentials": {
                "value": {
                  "status": "AUTH_FAILURE",
                  "message": "Invalid authentication"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error. When a request references an invalid endpoint or resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Model id 'abc' is not valid."
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Model processing failed. Extraction model or LLM could not process your request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "OCR failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "Error during request to OCR microservice."
                }
              },
              "LLM failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "We made three attempts to process the model with no success."
                }
              }
            }
          }
        }
      },
      "502": {
        "description": "Could not connect to model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request to the model failed."
                }
              }
            }
          }
        }
      },
      "522": {
        "description": "Model failed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Model failure": {
                "value": {
                  "status": "FAILURE",
                  "message": "A model error occurred. Please report this to support@lazarusai.com."
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.lazarusai.com/api",
      "description": ""
    }
  ]
}