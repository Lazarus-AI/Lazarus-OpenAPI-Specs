{
  "openapi": "3.1.0",
  "info": {
    "title": "RikAI2",
    "version": "",
    "description": "",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "termsOfService": "https://www.lazarusforms.com/legal",
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusforms.com"
    },
    "summary": ""
  },
  "paths": {
    "/rikai/chat/rikai2": {
      "post": {
        "summary": "Post Custom Rikai Chat Json",
        "description": "Endpoint that supports custom RikAI requests with Content-Type application/json without requiring a file input or passed OCR.\n\nArgs:\n    request (Request): FastAPI request object\n    req_body (RikAIChatRequestBody): Serialized request body model\n    model_id (ModelId): The Id of the model\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth key from request headers\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "post_custom_rikai_chat_json_rikai_chat__model_id__post",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RikAIChatRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rikai/custom/rikai2": {
      "post": {
        "summary": "Post Custom Rikai Json",
        "description": "Endpoint that supports custom RikAI requests with Content-Type application/json\n\nArgs:\n    request (Request): FastAPI request object\n    req_body (RikAIRequestBody): Serialized request body model\n    model_id (str): Custom model id from request path parameters\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth Key from request headers\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "post_custom_rikai_json_rikai_custom__model_id__post",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RikAIRequestBody"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RikAIFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rikai/ocr/rikai2": {
      "post": {
        "summary": "Post Custom Rikai Ocr",
        "description": "Endpoint that supports custom RikAI requests with Content-Type application/json and passed OCR.\n   Supports passed Microsoft OCR if \"msOCR\": True passed in settings. NOT redirected to legacy.\n\nArgs:\n    request (Request): FastAPI request object\n    req_body (RikAIOCRRequestBody): Serialized request body model\n    model_id (str): Custom model id from request path parameters\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth Key from request headers\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "post_custom_rikai_ocr_rikai_ocr__model_id__post",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RikAIOCRRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAIResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rikai/zip/rikai2": {
      "post": {
        "summary": "Post Zip Custom Rikai",
        "description": "Endpoint that supports custom RikAI requests with Content-Type application/json and\nwith zip file response (unless query parameter 'async' is true)\n\nArgs:\n    request (Request): FastAPI request object\n    req_body (ZipRequestBody): Serialized request body model\n    model_id (str): Custom model id from request path parameters\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth Key from request headers\n    async_mode (bool): Async mode from query parameters\n    bulk_request (bool): Bulk request from query parameters\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "post_zip_custom_rikai_rikai_zip__model_id__post",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "async",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "async",
              "description": "Runs request asynchronously"
            },
            "description": "Runs request asynchronously"
          },
          {
            "name": "bulk",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "bulk",
              "description": "Lets zip endpoints know if a request is coming from a bulk endpoint. Internal use only.",
              "forceExclude": true
            },
            "description": "Lets zip endpoints know if a request is coming from a bulk endpoint. Internal use only."
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZipRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZipResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rikai/bulk": {
      "post": {
        "summary": "Bulk file upload (async)",
        "description": "Upload 1 or more files to RikAI2 for asynchronous processing. By default, a ZIP file will be uploaded to your `outputURL` for each document in the request. If you set the `returnJSON` parameter to true, a JSON file will be provided to the `outputURL` instead.\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if a file name could not be extracted from file data.",
        "operationId": "post_bulk_rikai2",
        "parameters": [
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        }
      }
    },
    "/rikai/bulk/rikai2": {
      "post": {
        "summary": "Post Bulk Custom Rikai",
        "description": "This function queues all of the files in the request to /zip?async=true\nand sends each resulting zip to the output url defined by the user.\n\nArgs:\n    request (Request): fastapi request object\n    req_body (BulkRequestBody): serialized request body model\n    model_id (str): Custom model id from request path parameters\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth Key from request headers\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "post_bulk_custom_rikai_rikai_bulk__model_id__post",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "custom_model_id",
              "description": "Custom model ID"
            },
            "description": "Custom model ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/rikai/zip/async/{status_id}": {
      "get": {
        "summary": "Get Async Status Rikai",
        "description": "Retrieves the status of a bulk async API request\n\nArgs:\n    request (Request): FastAPI request object\n    org_id (str): Org ID from request headers\n    auth_key (str): Auth key from request headers\n    status_id (str): Status ID of the document from request path parameters\n    api_version (str, optional): User can pass apiVersion in header. Unused here but for documentation purposes.\n    lb_api_version (str, optional): API version header from load balancer. Unused here but for documentation purposes.\n    sub_org_id (str, optional): Sub Org ID from request headers",
        "operationId": "get_async_status_rikai_rikai_zip_async__status_id__get",
        "parameters": [
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "status_id",
              "description": "Status ID"
            },
            "description": "Status ID"
          },
          {
            "name": "orgId",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "orgId",
              "description": "Organization ID"
            },
            "description": "Organization ID"
          },
          {
            "name": "authKey",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "authKey",
              "description": "Authentication key"
            },
            "description": "Authentication key"
          },
          {
            "name": "apiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "apiVersion",
              "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
            },
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          {
            "name": "lbApiVersion",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "lbApiVersion",
              "description": "API version from load balancer used for request. Should always be passed by lb.",
              "forceExclude": true
            },
            "description": "API version from load balancer used for request. Should always be passed by lb."
          },
          {
            "name": "subOrgId",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "pattern": "^[a-zA-Z0-9\\-_]+$",
              "title": "subOrgId",
              "description": "Sub-organization ID"
            },
            "description": "Sub-organization ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Answer": {
        "properties": {
          "answer": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "Model's answer to the question asked."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "The question asked."
          },
          "confidence": {
            "type": "number",
            "description": "Answer confidence score ranging from 0 to 1."
          },
          "context": {
            "type": "string",
            "description": "Where in the document the answer was found."
          },
          "translated": {
            "type": "string",
            "description": "Translated answer if the `language` field was included in the request"
          }
        },
        "type": "object",
        "required": [
          "answer",
          "question"
        ],
        "title": "Answer"
      },
      "AsyncStatusResponse": {
        "properties": {
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "Status of the request."
          }
        },
        "type": "object",
        "required": [],
        "title": "AsyncStatusResponse"
      },
      "BulkBase64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file from which data will be extracted. If value is an array of base64 strings, each string will be combined into one PDF before getting run through the model."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          }
        },
        "type": "object",
        "required": [
          "base64",
          "question"
        ],
        "title": "BulkBase64Request"
      },
      "BulkRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/BulkURLRequest"
          },
          {
            "$ref": "#/components/schemas/BulkBase64Request"
          }
        ],
        "title": "BulkRequestBody",
        "required": [],
        "properties": {}
      },
      "BulkResponse": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Status message."
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "statusId": {
            "type": "object",
            "description": "List of document IDs for each file uploaded."
          },
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "failedRequests": {
            "items": {},
            "type": "array",
            "description": "File requests that failed to queue."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request `metadata` field."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "Status of the request."
          },
          "warning": {
            "type": "object",
            "description": "Warnings such as webhook failure."
          }
        },
        "type": "object",
        "required": [],
        "title": "BulkResponse"
      },
      "BulkURLRequest": {
        "properties": {
          "inputURL": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file."
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          }
        },
        "type": "object",
        "required": [
          "inputURL",
          "question"
        ],
        "title": "BulkURLRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array"
          }
        },
        "type": "object",
        "title": "HTTPValidationError",
        "required": []
      },
      "InputOutputSFTP": {
        "properties": {
          "inputURL": {
            "$ref": "#/components/schemas/SFTP",
            "description": "SFTP server authentication info for the `inputURL`."
          },
          "outputURL": {
            "$ref": "#/components/schemas/SFTP",
            "description": "SFTP server authentication info for the `outputURL`."
          }
        },
        "type": "object",
        "title": "InputOutputSFTP",
        "required": []
      },
      "RikAIBase64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file from which data will be extracted. If value is an array of base64 strings, each string will be combined into one PDF before getting run through the model."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "type": "object"
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "base64",
          "question"
        ],
        "title": "RikAIBase64Request"
      },
      "RikAIChatRequestBody": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          }
        },
        "type": "object",
        "title": "RikAIChatRequestBody",
        "required": [
          "question"
        ]
      },
      "RikAIFileRequest": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File to upload: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF, or TXT."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "file",
          "question"
        ],
        "title": "RikAIFileRequest"
      },
      "RikAIOCRRequestBody": {
        "properties": {
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "type": "object"
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file from which data will be extracted. If value is an array of base64 strings, each string will be combined into one PDF before getting run through the model."
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          }
        },
        "type": "object",
        "required": [
          "ocr",
          "question"
        ],
        "title": "RikAIOCRRequestBody"
      },
      "RikAIRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RikAIURLRequest"
          },
          {
            "$ref": "#/components/schemas/RikAIBase64Request"
          }
        ],
        "title": "RikAIRequestBody",
        "required": [],
        "properties": {}
      },
      "RikAIResponse": {
        "properties": {
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Number of questions asked."
          },
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          "baseModel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Base model used during data extraction."
          },
          "data": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Answer"
                },
                "type": "array"
              },
              {
                "$ref": "#/components/schemas/Summary"
              }
            ],
            "description": "Question and answer data for each question asked in the request."
          },
          "documentId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID for document request or filename if specified."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "language": {
            "type": "string",
            "description": "Language results are translated into."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request `metadata` field."
          },
          "ocrResults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request."
          },
          "settings": {
            "type": "object",
            "description": "JSON containing any custom user settings specified in the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "Status of the request."
          }
        },
        "type": "object",
        "required": [],
        "title": "RikAIResponse"
      },
      "RikAIURLRequest": {
        "properties": {
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "type": "object"
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          }
        },
        "type": "object",
        "required": [
          "inputURL",
          "question"
        ],
        "title": "RikAIURLRequest"
      },
      "SFTP": {
        "properties": {
          "user": {
            "type": "string",
            "description": "SFTP username."
          },
          "password": {
            "type": "string",
            "description": "SFTP password. Either `password` or `privateKey` are required."
          },
          "privateKey": {
            "type": "string",
            "description": "Base64 encoded SFTP private key. Either `password` or `privateKey` are required."
          },
          "privateKeyPassphrase": {
            "type": "string",
            "description": "Optional passphrase to use if private key is protected."
          }
        },
        "type": "object",
        "required": [
          "user"
        ],
        "title": "SFTP"
      },
      "Settings": {
        "properties": {
          "advancedExplainability": {
            "type": "boolean",
            "description": "Set to `false` to turn off context and explanation. Decreases model processing time.",
            "default": true
          },
          "advancedVision": {
            "type": "boolean",
            "description": "Set to `true` to enable advanced features such as checkboxes and tables.",
            "default": false
          },
          "returnConfidence": {
            "type": "boolean",
            "description": "Set to true to include bounding boxes and confidence score in response."
          }
        },
        "type": "object",
        "title": "Settings",
        "required": []
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "SUBMITTED",
          "FAILURE",
          "AUTH_FAILURE",
          "RUNNING"
        ],
        "title": "StatusEnum",
        "required": [],
        "properties": {}
      },
      "Summary": {
        "properties": {
          "summary": {
            "type": "string",
            "description": "Model generated summary. Corresponds to summary description."
          },
          "translatedSummary": {
            "type": "string",
            "description": "Model generated translated summary. Corresponds to summary translated description."
          }
        },
        "type": "object",
        "required": [
          "summary"
        ],
        "title": "Summary"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array"
          },
          "msg": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "ZipBase64Request": {
        "properties": {
          "base64": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file from which data will be extracted. If value is an array of base64 strings, each string will be combined into one PDF before getting run through the model."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "type": "object"
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
            "default": true
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release."
          }
        },
        "type": "object",
        "required": [
          "base64",
          "question"
        ],
        "title": "ZipBase64Request"
      },
      "ZipRequestBody": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ZipURLRequest"
          },
          {
            "$ref": "#/components/schemas/ZipBase64Request"
          }
        ],
        "title": "ZipRequestBody",
        "required": [],
        "properties": {}
      },
      "ZipResponse": {
        "properties": {
          "code": {
            "type": "integer",
            "description": "Response code."
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "organization": {
            "type": "string",
            "description": "Organization ID."
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "apiVersion": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "API version used for the request. Defaults to the latest production version. To pin to a specific API version, please contact your Lazarus representative to receive the appropriate version header."
          },
          "documentId": {
            "type": "string",
            "description": "ID for document request or filename if specified."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time recorded in epoch (Unix timestamp) format."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request `metadata` field."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Number of questions asked."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time recorded in epoch (Unix timestamp) format."
          },
          "status": {
            "$ref": "#/components/schemas/StatusEnum",
            "description": "Status of the request."
          },
          "statusId": {
            "type": "string",
            "description": "List of document IDs for each file uploaded."
          },
          "warning": {
            "type": "object",
            "description": "Warnings such as webhook failure."
          }
        },
        "type": "object",
        "required": [],
        "title": "ZipResponse"
      },
      "ZipURLRequest": {
        "properties": {
          "inputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked, except for the RikAI2-Extract endpoint, where the question must be a JSON string or a dictionary."
          },
          "settings": {
            "$ref": "#/components/schemas/Settings",
            "description": "Optional user settings."
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "Webhook URL to which status updates and JSON response will be sent. This is where you will receive the model output. \n[Here](docs/webhook-examples.md) is an example of a webhook URL response."
          },
          "webhookHeaders": {
            "type": "object",
            "description": "Request headers to include in the POST requests to the webhook."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Receive the full JSON response at the webhook URL upon request completion. Set to `false` to only receive request status.",
            "default": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to `true` only if the input file is a fillable pdf.",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A language code (e.g. 'EN') or the name of the language you wish to translate answers into. [List of supported codes.](../../../prompting-guide/general/faq/#supported-languages)"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response."
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "type": "object"
          },
          "outputURL": {
            "type": "string",
            "pattern": "(https?|s?ftp)://(?:www\\\\.)?[a-zA-Z0-9./:]+",
            "description": "URL where resulting zip file or JSON can be sent. Must be open to PUT requests."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "default": {}
          },
          "returnJSON": {
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
            "default": true
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Does not work if advanced_vision is also set to `true`.",
            "default": false
          },
          "sftp": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SFTP"
              },
              {
                "$ref": "#/components/schemas/InputOutputSFTP"
              }
            ],
            "description": "SFTP authentication details. Required for SFTP URLs in `inputURL` or `outputURL`. Option to provide separate server authentication info for `inputURL` and `outputURL`."
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of `fileId`, will be removed in a future release."
          }
        },
        "type": "object",
        "required": [
          "inputURL",
          "question"
        ],
        "title": "ZipURLRequest"
      },
      "ErrorMessage": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "description": "Error message."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "apiVersion": {
            "description": "API version used for request.",
            "type": "string"
          }
        },
        "type": "object",
        "title": "ErrorMessage",
        "description": "Response when an error occurs."
      }
    },
    "responses": {
      "400": {
        "description": "Bad request or failure to read. Request was invalid or we could not process your data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized attempt. There was an issue with your credentials, model permissions or billing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Invalid credentials": {
                "value": {
                  "status": "AUTH_FAILURE",
                  "message": "Invalid authentication",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error. When a request references an invalid endpoint or resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Model id 'abc' is not valid.",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "An internal server error or model processing failed. Extraction model or LLM could not process your request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "OCR failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "Error during request to OCR microservice.",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              },
              "LLM failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "We made three attempts to process the model with no success.",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              },
              "Internal server error": {
                "value": {
                  "status": "FAILURE",
                  "message": "An internal error occurred. Please report this to support@lazarusai.com.",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              }
            }
          }
        }
      },
      "502": {
        "description": "Could not connect to model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Model unavailable": {
                "value": {
                  "status": "FAILURE",
                  "message": "An internal error occurred. Please report this to support@lazarusai.com.",
                  "apiVersion": "YYYY-MM-DD",
                  "id": "ca7a0195-30a8-4fc3-9198-5977fa3767e4"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.lazarusai.com/api",
      "description": ""
    }
  ]
}