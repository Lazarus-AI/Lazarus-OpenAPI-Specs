{
  "openapi": "3.1.0",
  "info": {
    "title": "RikAI 2",
    "termsOfService": "https://www.lazarusai.com/legal",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusai.com"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/rikai2": {
      "post": {
        "summary": "RikAI 2",
        "description": "Supported input files should support standard file formats (Formats are checked with file header bytes):\n- PDF\n- JPG/JPEG\n- PNG\n- TIFF/TIF\n- HEIC",
        "operationId": "rikai2_post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RikAI2Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAI2Response"
                }
              }
            }
          },
          "401": {
            "description": "Invalid/Empty License",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal API error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "522": {
            "description": "Model failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "summary": "Status",
        "description": "Check the status of app dependencies.",
        "operationId": "status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Data": {
        "properties": {
          "question": {
            "type": "string",
            "title": "Question",
            "description": "Question asked"
          },
          "answer": {
            "type": "string",
            "title": "Answer",
            "description": "Answer to appropriate question"
          },
          "confidence": {
            "type": "number",
            "description": "Answer confidence score ranging from 0 to 1."
          },
          "context": {
            "type": "string",
            "description": "Where in the document the answer was found."
          }
        },
        "type": "object",
        "required": [
          "question",
          "answer"
        ],
        "title": "Data",
        "description": "Answer data model for /rikai2 response"
      },
      "RikAI2Request": {
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Question",
            "description": "Single question or list of questions as string to ask about the file"
          },
          "file": {
            "type": "string",
            "title": "File",
            "description": "Input file as a base64 encoded string"
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response. Under construction.",
            "default": false
          },  
          "pageBatchSize": {
            "type": "int",
            "description": "Specifies the number of pages that are passed to the Lazarus Forms model at a time. The input document will be divided into chunks, each containing up to `pageBatchSize` pages. Must be a positive integer. Currently only supported for PDFs.",
            "default": null
          },          
          "settings": {
            "properties": {
              "advancedExplainability": {
                "type": "boolean",
                "description": "When set to `false`, the model processes requests faster but does not return the full context. Set to `true` to include full context.",
                "default": false
              },
            },
            "type": "object",
            "title": "Settings",
          }          
        },
        "type": "object",
        "required": [
          "question",
          "file"
        ],
        "title": "RikAI2Request",
        "description": "Request body for /rikai2 endpoint"
      },
      "RikAI2Response": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Data"
            },
            "type": "array",
            "title": "Data",
            "description": "List of question and answer pairs"
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Name of the model"
          },
          "ocrResults": {
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request. Under construction.",
            "type": "object"
          }          
        },
        "type": "object",
        "required": [
          "data",
          "model"
        ],
        "title": "RikAI2Response",
        "description": "Response body for /rikai2 endpoint"
      },
      "InvalidLicenseResponse": {
        "type": "string",
        "title": "InvalidLicenseResponse",
        "description": "Invalid License Response - License was not able to successfully authenticate"
      },
      "StatusComponent": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusEndpointEnum",
            "description": "Status of a specific component of the container"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StatusComponentType"
              },
              {
                "type": "null"
              }
            ],
            "description": "Type of the component"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Error message if status is ERROR"
          }
        },
        "type": "object",
        "required": [
            "status"
        ],
        "title": "StatusComponent",
        "description": "Status of an individual component."
      },
      "StatusComponentName": {
        "type": "string",
        "enum": [
          "model",
          "ocr",
          "license"
        ],
        "title": "StatusComponentName",
        "description": "Status components."
      },
      "StatusComponentType": {
        "type": "string",
        "enum": [
          "vLLM",
          "Online License",
          "Offline License"
        ],
        "title": "StatusComponentType",
        "description": "Types of status components."
      },
      "StatusEndpointEnum": {
        "type": "string",
        "enum": [
          "OK",
          "ERROR"
        ],
        "title": "StatusEndpointEnum",
        "description": "Status values."
      },
      "StatusResponse": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/StatusEndpointEnum",
            "description": "Overall container status"
          },
          "components": {
            "additionalProperties": {
                "$ref": "#/components/schemas/StatusComponent"
            },
            "propertyNames": {
                "$ref": "#/components/schemas/StatusComponentName"
            },
            "type": "object",
            "title": "Components",
            "description": "Components that make up the container status"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Timestamp",
            "description": "ISO timestamp, UTC timezone"
          }
        },
        "type": "object",
        "required": [
          "status",
          "components",
          "timestamp"
        ],
        "title": "StatusResponse",
        "description": "GET /status response body."
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILURE",
          "AUTH_FAILURE"
        ],
        "title": "StatusEnum",
        "description": "Status enum for responses"
      },
    "ErrorResponse": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ErrorResponse",
        "description": "Response when an error occurs."
      }
    }
  },
  "servers": [
    {
      "url": "https://<hostname>:8080",
      "description": ""
    }
  ]

}