{
  "openapi": "3.1.0",
  "info": {
    "title": "RikY2",
    "version": "",
    "summary": "",
    "description": "",
    "contact": {
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "name": "Lazarus IT",
      "email": "support@lazarusai.com"
    },
    "license": {
      "name": "Get Lazarus",
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusforms.com"
    },
    "termsOfService": "https://www.lazarusforms.com/legal"
  },
  "paths": {
    "/rikai/custom/riky2": {
      "post": {
        "summary": "Document input, JSON response",
        "description": "Make a request to a custom model and receive JSON response data.\n\n#### File upload options\nWe support requests with Content-Type `application/json` or `multipart/form-data`. Note that `application/json` requests are preferred as `mulitpart/form-data` requests do not support all flags and fields.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n- `[multipart/form-data]` **file**  upload local file from browser",
        "operationId": "post_custom",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RikAIURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RikAIBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RikAIFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAIResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "nc2o12mwe4br9"
        }
      }
    },
    "/rikai/ocr/riky2": {
      "post": {
        "summary": "OCR input, JSON response",
        "description": "Make a request to a custom model by providing OCR results as input, receive JSON response data. This method skips the OCR process that typically precedes Riky2 calls. It is ideal for asking multiple questions of the same document.",
        "operationId": "post_ocr_custom",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/RikAIOCRURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RikAIOCRBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RikAIResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "ipq1dzw0klyqb"
        }
      }
    },
    "/rikai/zip/riky2": {
      "post": {
        "summary": "Document input, ZIP file response",
        "description": "Make a request to a custom model and receive response data in a ZIP file.\n To process your request asynchronously and send the ZIP file to an `outputURL`, include the `async` query parameter. \n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if `fileId` field is not included in the request.",
        "operationId": "post_zip_custom",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          },
          {
            "$ref": "#/components/parameters/async"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ZipURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/ZipBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request.\n\nWith query parameter `?async=true` at the end of the URL, receive a JSON response and ZIP file uploaded to `outputURL`. Without `async` query parameter or `?async=false`, receive ZIP file data directly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ZipResponse"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "ehtfatrcdiqvl"
        },
        "x-internal": false
      }
    },
    "/rikai/bulk/riky2": {
      "post": {
        "summary": "Bulk file upload",
        "description": "Upload 1 or more files to a custom model for asynchronous processing. By default, a ZIP file will be uploaded to your `outputURL` for each document in the request. If you set the `returnJSON` parameter to true, a JSON file will be provided to the `outputURL` instead.\n\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data\n\n#### Response zip file contents\n| File  | Description |\n| ----- | ------- |\n| .csv  | CSV containing a breakdown of the itemization |\n| .json | JSON file containing the entire JSON response |\n| .txt  | TXT file containing the entire JSON response |\n| file  | The original uploaded file |\n\nThe default name for the file is an epoch timestamp if a file name could not be extracted from file data.",
        "operationId": "post_bulk_custom",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/BulkURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/BulkBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkResponse"
                }
              }
            }
          },
          "207": {
            "$ref": "#/components/responses/207"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "eakigubl3hyi2"
        }
      }
    },
    "/rikai/zip/async/{statusId}/riky2": {
      "get": {
        "summary": "Get async request status",
        "description": "Retrieves the status of an asynchronous request to `/rikai/zip/riky2?async=True` or `/rikai/bulk/riky2`. Identifiable by statusId.",
        "operationId": "get_async_status",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          },
          {
            "$ref": "#/components/parameters/documentId"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncStatusResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "x-internal": true,
        "x-stoplight": {
          "id": "awjcy5y4g8dpd"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Answer": {
        "properties": {
          "answer": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "Model's answer to the question asked."
          },
          "question": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "The question asked.",
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "context": {
            "type": "string",
            "description": "Where in the document the answer was found."
          },
          "confidence": {
            "type": "number",
            "description": "Answer confidence score ranging from 0 to 1."
          },
          "translated": {
            "type": "string",
            "description": "Translated answer if the `language` field was included in the request"
          }
        },
        "type": "object",
        "required": [
          "answer",
          "question"
        ],
        "title": "Answer",
        "description": "Answer model, data for each Q&A in response",
        "x-stoplight": {
          "id": "qwphq6mo0l0e7"
        }
      },
      "AsyncStatusResponse": {
        "properties": {
          "endTime": {
            "type": "integer",
            "description": "Request end time."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "AsyncStatusResponse",
        "description": "/rikai/zip/async response",
        "x-stoplight": {
          "id": "hxxdjj937j6fq"
        }
      },
      "ErrorMessage": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ErrorMessage",
        "description": "Response when an error occurs.",
        "x-stoplight": {
          "id": "4k1flaassbzpo"
        }
      },
      "BulkBase64Request": {
        "type": "object",
        "title": "BulkBase64Request",
        "description": "/rikai/bulk request body",
        "x-stoplight": {
          "id": "7aoaf3g2iu54i"
        },
        "required": [
          "base64",
          "question",
          "outputURL"
        ],
        "properties": {
          "base64": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Sends the whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "fileId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.\n",
            "setDefault": "file name",
            "default": "file name"
          },
          "outputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "forceType": "object"
          },
          "returnJSON": {
            "type": "boolean",
            "x-stoplight": {
              "id": "xhjd2risiptgw"
            },
            "default": false,
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          },
          "webhookHeaders": {
            "type": "object",
            "x-stoplight": {
              "id": "dvd77ru9qo2ar"
            },
            "description": "Request headers to include in the POST request to the webhook."
          }
        }
      },
      "BulkURLRequest": {
        "type": "object",
        "title": "BulkURLRequest",
        "description": "/rikai/bulk request body",
        "x-stoplight": {
          "id": "pyl6qaezzaxlh"
        },
        "required": [
          "question",
          "inputURL",
          "outputURL"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "Sends the whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": true
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "inputURL": {
            "type": "array",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT.",
            "forceRequire": true,
            "items": {
              "type": "string"
            }
          },
          "fileId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Custom ID for document. Requests with multiple files accept unique fileIds for each file.\n",
            "setDefault": "file name",
            "default": "file name"
          },
          "outputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL where resulting zip file or JSON should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "forceType": "object"
          },
          "returnJSON": {
            "x-stoplight": {
              "id": "9qnok067lwszj"
            },
            "type": "boolean",
            "description": "Set to `true` to send a JSON response rather than a ZIP file to the outputURL.",
            "default": false
          },
          "webhookHeaders": {
            "type": "object",
            "x-stoplight": {
              "id": "0mv08zmc00wy4"
            },
            "description": "Request headers to include in the POST request to the webhook."
          }
        }
      },
      "BulkResponse": {
        "properties": {
          "endTime": {
            "type": "integer",
            "description": "Request end time."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time."
          },
          "statusId": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            ],
            "description": "List of document IDs for each file uploaded."
          },
          "message": {
            "type": "string",
            "description": "Status message."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request 'metadata' field."
          }
        },
        "type": "object",
        "required": [
          "model",
          "statusId",
          "message"
        ],
        "title": "BulkResponse",
        "description": "/rikai/bulk response",
        "x-stoplight": {
          "id": "ac4pm3jpdqgzt"
        }
      },
      "RikAIBase64Request": {
        "type": "object",
        "title": "RikAIBase64Request",
        "description": "/rikai/custom/riky2 request body",
        "x-stoplight": {
          "id": "2t7vlu0nf8lqd"
        },
        "required": [
          "base64",
          "question"
        ],
        "properties": {
          "base64": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          }
        }
      },
      "RikAIChatRequestBody": {
        "type": "object",
        "title": "RikAIChatRequestBody",
        "description": "/rikai/chat request body\nUploads blank png base64 string to base64 attribute so user is not required to input a file.",
        "x-stoplight": {
          "id": "lef6kbw7mbem2"
        },
        "required": [
          "question"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },
          "settings": {
            "description": "Optional user settings.",
            "forceType": "object",
            "type": "object"
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          }
        }
      },
      "RikAIFileRequest": {
        "type": "object",
        "title": "RikAIFileRequest",
        "description": "/rikai/custom/riky2 request body",
        "x-stoplight": {
          "id": "rh14g08d1ok66"
        },
        "required": [
          "question",
          "file"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "File to upload: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF, or TXT.",
            "forceRequire": true
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          }
        }
      },
      "RikAIOCRBase64Request": {
        "type": "object",
        "title": "RikAIOCRBase64Request",
        "description": "/rikai/ocr/riky2 request body",
        "x-stoplight": {
          "id": "l5dv9ec9gysdh"
        },
        "required": [
          "question",
          "ocr"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          }
        }
      },
      "RikAIOCRURLRequest": {
        "type": "object",
        "title": "RikAIOCRURLRequest",
        "description": "/rikai/ocr/riky2 request body",
        "x-stoplight": {
          "id": "9gkz6vkclu3t8"
        },
        "required": [
          "question",
          "ocr"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          }
        }
      },
      "RikAIURLRequest": {
        "type": "object",
        "title": "RikAIURLRequest",
        "description": "/rikai/custom/riky2 request body",
        "x-stoplight": {
          "id": "hlbye7psy40ds"
        },
        "required": [
          "question",
          "inputURL"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "inputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT.",
            "forceRequire": true
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          }
        }
      },
      "RikAIResponse": {
        "properties": {
          "endTime": {
            "type": "integer",
            "description": "Request end time."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time."
          },
          "data": {
            "items": {
              "$ref": "#/components/schemas/Answer"
            },
            "type": "array",
            "description": "Question and answer data for each question asked in the request."
          },
          "documentId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID for document request or filename if specified."
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "questions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "description": "Number of questions asked."
          },
          "baseModel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Base model used during data extraction."
          },
          "ocrResults": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request."
          },
          "settings": {
            "type": "object",
            "description": "JSON containing any custom user settings specified in the request."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request 'metadata' field."
          }
        },
        "type": "object",
        "required": [
          "model",
          "pages",
          "questions"
        ],
        "title": "RikAIResponse",
        "description": "/rikai response",
        "x-stoplight": {
          "id": "5flqwlhba2ofv"
        }
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "SUBMITTED",
          "FAILURE",
          "AUTH_FAILURE",
          "RUNNING"
        ],
        "title": "StatusEnum",
        "description": "Status enum for responses",
        "x-stoplight": {
          "id": "ayxtee79qn39v"
        }
      },
      "ZipBase64Request": {
        "type": "object",
        "title": "ZipBase64Request",
        "description": "/rikai/zip/riky2 request body",
        "x-stoplight": {
          "id": "yh9cw3gyopnk9"
        },
        "required": [
          "base64",
          "question"
        ],
        "properties": {
          "base64": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "With query parameter` ?async=true` at the end of the URL, defaults to `true`, otherwise defaults to `false`. When set to true, send whole JSON response to webhook URL upon request completion. Set to false to only send request status.\n\n",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "outputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "forceType": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          },
          "returnJSON": {
            "type": "boolean",
            "x-stoplight": {
              "id": "j3p6kw9cwgtoc"
            },
            "default": false,
            "description": "For asynchronous requests only, set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          }
        }
      },
      "ZipURLRequest": {
        "type": "object",
        "title": "ZipURLRequest",
        "description": "/rikai/zip/riky2 request body",
        "x-stoplight": {
          "id": "vbiikneyv02t5"
        },
        "required": [
          "question",
          "inputURL"
        ],
        "properties": {
          "question": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "description": "A string or list of strings containing the question(s) to be asked. A 2D array of question lists is also supported. Each nested list contains a question, and subsequent follow-up questions.",
            "forceRequire": true,
            "default": [["What is the patient's date of birth?", "Format that as YYYY-MM-DD"], ["What is the patient's first and last name?"]]
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to `true` to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          },

          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to."
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "With query parameter` ?async=true` at the end of the URL, defaults to `true`, otherwise defaults to `false`. When set to true, send whole JSON response to webhook URL upon request completion. Set to false to only send request status.\n",
            "default": false
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Will rasterize a pdf. Set this parameter to  `true` only if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document.",
            "setDefault": "file name",
            "default": "file name"
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "inputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, JPG, PNG, TIFF, TIF or TXT.",
            "forceRequire": true
          },
          "ocr": {
            "description": "OCR data for the document (entire response from [OCR endpoint](../../ocr/ocr_v2), [example here](https://docs.google.com/document/d/15fSuTmEWKtidAFbaP3m9uMfX4GziJqZnNP385Sel5rM/edit?tab=t.0)). If included, we do not run OCR on the document and use these results instead.",
            "forceType": "object",
            "type": "object"
          },
          "outputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL where resulting zip file should be sent. Must be open to PUT requests. Required if submitting an async request."
          },
          "outputURLHeaders": {
            "type": "object",
            "description": "Request headers to include in the PUT request to the output URL.",
            "forceType": "object"
          },
          "statusId": {
            "type": "string",
            "description": "WARNING: Deprecating in favor of 'fileId', will be removed in a future release."
          },
          "returnJSON": {
            "type": "boolean",
            "x-stoplight": {
              "id": "q8zgjctp4o6s0"
            },
            "default": false,
            "description": "For asynchronous requests only, Set to `true` to send a JSON response rather than a ZIP file to the outputURL."
          }
        }
      },
      "ZipResponse": {
        "properties": {
          "endTime": {
            "type": "integer",
            "description": "Request end time."
          },
          "id": {
            "type": "string",
            "description": "Response ID"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document."
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time."
          },
          "code": {
            "type": "integer",
            "description": "Response code."
          },
          "documentId": {
            "type": "string",
            "description": "ID for document request or filename if specified."
          },
          "statusId": {
            "type": "string",
            "description": "List of document IDs for each file uploaded."
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request 'metadata' field."
          },
          "organization": {
            "type": "string",
            "description": "Organization ID."
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "questions": {
            "type": "integer",
            "description": "Number of questions asked."
          }
        },
        "type": "object",
        "required": [
          "model",
          "code",
          "organization",
          "pages",
          "questions"
        ],
        "title": "ZipResponse",
        "description": "/rikai/zip response",
        "x-stoplight": {
          "id": "1nqa5vy3oq0ne"
        }
      }
    },
    "parameters": {
      "orgId": {
        "name": "orgId",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "orgId",
          "description": "Organization ID"
        },
        "description": "Organization ID"
      },
      "authKey": {
        "name": "authKey",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "authKey",
          "description": "Authentication key"
        },
        "description": "Authentication key"
      },
      "async": {
        "name": "async",
        "in": "query",
        "required": false,
        "schema": {
          "anyOf": [
            {
              "type": "boolean"
            },
            {
              "type": "null"
            }
          ],
          "title": "async",
          "description": "Runs request asynchronously"
        },
        "description": "Runs request asynchronously"
      },
      "statusId": {
        "name": "statusId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "title": "document_id",
          "description": "Document ID"
        },
        "description": "Status ID"
      }
    },
    "responses": {
      "207": {
        "description": "Bulk upload request failed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question"
                }
              }
            }
          }
        }
      },
      "400": {
        "description": "Bad request or failure to read. Request was invalid or we could not process your data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized attempt. There was an issue with your credentials, model permissions or billing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Invalid credentials": {
                "value": {
                  "status": "AUTH_FAILURE",
                  "message": "Invalid authentication"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error. When a request references an invalid endpoint or resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Model id 'abc' is not valid."
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Model processing failed. Extraction model or LLM could not process your request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "OCR failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "Error during request to OCR microservice."
                }
              },
              "LLM failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "We made three attempts to process the model with no success."
                }
              }
            }
          }
        }
      },
      "502": {
        "description": "Could not connect to model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request to the model failed."
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.lazarusai.com/api",
      "description": ""
    }
  ]
}
