{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "6ljdug1bd5vqe"
  },
  "info": {
    "title": "RikAI-Generic-Summarizer",
    "version": "0.1.0",
    "description": "",
    "summary": "",
    "contact": {
      "name": "Lazarus IT",
      "url": "https://lazarus-ai.atlassian.net/servicedesk/customer/portal/8",
      "email": "support@lazarusai.com"
    },
    "license": {
      "url": "https://emvnha23ura.typeform.com/lazarus-rikai?typeform-source=dashboard.lazarusforms.com",
      "name": "Get Lazarus"
    },
    "termsOfService": "https://www.lazarusforms.com/legal"
  },
  "paths": {
    "/summarize": {
      "post": {
        "summary": "JSON response",
        "description": "Make a request to Summarizer and receive JSON response data.\n\n#### File upload options\nWe only support requests with Content-Type `application/json` at this endpoint.\n- `[application/json]` **inputURL**  link to file\n- `[application/json]` **base64** base64 encoded file data",
        "operationId": "summarize",
        "parameters": [
          {
            "$ref": "#/components/parameters/orgId"
          },
          {
            "$ref": "#/components/parameters/authKey"
          },
          {
            "$ref": "#/components/parameters/subOrgId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/SummarizerURLRequest"
                  },
                  {
                    "$ref": "#/components/schemas/SummarizerBase64Request"
                  }
                ],
                "title": "Request Body"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummarizerResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "502": {
            "$ref": "#/components/responses/502"
          }
        },
        "x-stoplight": {
          "id": "p05wy6wo402p7"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorMessage": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "title": "status",
            "description": "Status of the request."
          },
          "message": {
            "type": "string",
            "title": "message",
            "description": "Error message."
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "ErrorMessage",
        "description": "Response when an error occurs.",
        "x-stoplight": {
          "id": "t05ei1ulavssb"
        }
      },
      "SummarizerBase64Request": {
        "type": "object",
        "title": "SummarizerBase64Request",
        "x-stoplight": {
          "id": "cabqorpfgs4r7"
        },
        "required": [
          "base64",
          "documentType",
          "summaryDescription"
        ],
        "properties": {
          "base64": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Base64 encoded string for the file to extract data from. If it is an array, the base64 strings will be appended into one PDF then ran through the model.",
            "forceRequire": true
          },
          "documentType": {
            "type": "string",
            "description": "The type of document you are uploading."
          },
          "summaryDescription": {
            "type": "string",
            "description": "Description of what you want in your summary."
          },
          "secondaryDescription": {
            "type": "string",
            "description": "Optional second summary description. Produces a second summary."
          },
          "jsonFormat": {
            "type": "string",
            "description": "JSON schema for summarizer model to fill in. Produces additional json data as a string."
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. If not present, will default to file name.",
            "setDefault": "file name",
            "default": "file name"
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to true to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to.\n"
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          }
        }
      },
      "SummarizerURLRequest": {
        "type": "object",
        "title": "SummarizerURLRequest",
        "x-stoplight": {
          "id": "5zvf1fr1vixzm"
        },
        "required": [
          "inputURL",
          "documentType",
          "summaryDescription"
        ],
        "properties": {
          "inputURL": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "URL for the file to extract data from: Must be a PDF, JPEG, PNG, TIFF, or TXT.",
            "forceRequire": true
          },
          "documentType": {
            "type": "string",
            "description": "The type of document you are uploading."
          },
          "summaryDescription": {
            "type": "string",
            "description": "Description of what you want in your summary."
          },
          "secondaryDescription": {
            "type": "string",
            "description": "Optional second summary description. Produces a second summary."
          },
          "jsonFormat": {
            "type": "string",
            "description": "JSON schema for summarizer model to fill in. Produces additional json data as a string."
          },
          "fileId": {
            "type": "string",
            "description": "Custom ID for document. If not present, will default to file name.",
            "setDefault": "file name",
            "default": "file name"
          },
          "forceOCR": {
            "type": "boolean",
            "description": "Set this parameter to true if the input file is a fillable pdf.",
            "setDefault": false,
            "default": false
          },
          "forceBase64": {
            "type": "boolean",
            "description": "Setting this parameter to true converts files to Base64 format before sending them on to the model.",
            "setDefault": false,
            "default": false
          },
          "metadata": {
            "type": "object",
            "description": "Custom JSON to be included in the returned response.",
            "forceType": "object"
          },
          "returnOCR": {
            "type": "boolean",
            "description": "Set to true to include OCR results in response.",
            "setDefault": false,
            "default": false
          },
          "webhook": {
            "type": "string",
            "pattern": "https?://(?:www\\\\.)?[a-zA-Z0-9./]+",
            "description": "Webhook URL to send status updates and JSON response to.\n"
          },
          "webhookSendFull": {
            "type": "boolean",
            "description": "When set to `true`, send whole JSON response to webhook URL upon request completion. Set to `false` to only send request status.\n",
            "default": false
          },
          "language": {
            "type": "string",
            "description": "A 2 character language code or the name of the language you wish to translate answers into."
          }
        }
      },
      "StatusEnum": {
        "type": "string",
        "enum": [
          "AUTH_FAILURE",
          "FAILURE",
          "SUCCESS"
        ],
        "title": "StatusEnum",
        "description": "Status values.",
        "x-stoplight": {
          "id": "yymo4wpeh0f45"
        }
      },
      "SummarizerResponse": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusEnum"
              }
            ],
            "description": "Status of the request."
          },
          "startTime": {
            "type": "integer",
            "description": "Request start time."
          },
          "endTime": {
            "type": "integer",
            "description": "Request end time."
          },
          "id": {
            "type": "string",
            "description": "Request ID.",
            "default": "6f5ce458-f1bd-4ebf-b939-ae91a8982bde"
          },
          "pages": {
            "type": "integer",
            "description": "Number of pages in the document."
          },
          "documentId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "ID for document request or filename if specified."
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Summary"
              }
            ],
            "description": "Summary data."
          },
          "ocrResults": {
            "type": "object",
            "description": "OCR results from the document. Returned only if `returnOCR` was set to true in the request."
          },
          "baseModel": {
            "type": "string",
            "description": "Base model used during data extraction.",
            "default": "ocr2"
          },
          "model": {
            "type": "string",
            "description": "Model used to process the document.",
            "default": "generic-summarizer"
          },
          "metadata": {
            "type": "object",
            "description": "JSON from the request 'metadata' field."
          }
        },
        "type": "object",
        "required": [
          "startTime",
          "pages",
          "data"
        ],
        "title": "SummarizerResponse",
        "x-stoplight": {
          "id": "rp2uewqap107j"
        }
      },
      "Summary": {
        "properties": {
          "summary": {
            "type": "string",
            "description": "Model generated summary. Corresponds to summary description."
          },
          "summaryTranslated": {
            "type": "string",
            "description": "Model generated translated summary. Corresponds to summary translated description."
          },
          "secondarySummary": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional model generated summary. Corresponds to secondary summary description."
          },
          "secondarySummaryTranslated": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Additional model generated translated summary. Corresponds to secondary summary translated description."
          },
          "jsonResponse": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "JSON data. Schema defined in `jsonFormat` field."
          },
          "jsonResponseTranslated": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Translated JSON data. Schema defined in 'jsonFormatTranslated' field."
          }
        },
        "type": "object",
        "required": [
          "summary"
        ],
        "title": "Summary",
        "x-stoplight": {
          "id": "1dqdym7qfutmq"
        }
      }
    },
    "parameters": {
      "orgId": {
        "name": "orgId",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "orgId",
          "description": "Organization ID"
        },
        "description": "Organization ID"
      },
      "authKey": {
        "name": "authKey",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "authKey",
          "description": "Authentication key"
        },
        "description": "Authentication key"
      },
      "subOrgId": {
        "name": "subOrgId",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "pattern": "^[a-zA-Z0-9\\-_]+$",
          "title": "subOrgId",
          "description": "Sub-organization ID"
        },
        "description": "Sub-organization ID"
      }
    },
    "responses": {
      "400": {
        "description": "Bad request or failure to read. Request was invalid or we could not process your data.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Missing required field": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request body is missing required field(s): question"
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized attempt. There was an issue with your credentials, model permissions or billing.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Invalid credentials": {
                "value": {
                  "status": "AUTH_FAILURE",
                  "message": "Invalid authentication"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error. When a request references an invalid endpoint or resource.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Model id 'abc' is not valid."
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Model processing failed. Extraction model or LLM could not process your request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "OCR failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "Error during request to OCR microservice."
                }
              },
              "LLM failed": {
                "value": {
                  "status": "FAILURE",
                  "message": "We made three attempts to process the model with no success."
                }
              }
            }
          }
        }
      },
      "502": {
        "description": "Could not connect to model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            },
            "examples": {
              "Custom model not found": {
                "value": {
                  "status": "FAILURE",
                  "message": "Request to the model failed."
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://api.lazarusforms.com/api/rikai",
      "description": ""
    }
  ]
}